{"version":3,"file":"logger.service.d.ts","sources":["logger.service.d.ts"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA","sourcesContent":["import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\nimport { NGXLoggerHttpService } from './http.service';\nimport { LoggerConfig } from './logger.config';\nimport { NGXLoggerMonitor } from './logger-monitor';\nimport { NGXMapperService } from './mapper.service';\nexport declare const Levels: string[];\nexport declare class NGXLogger {\n    private readonly mapperService;\n    private readonly httpService;\n    private platformId;\n    private readonly datePipe;\n    private readonly _isIE;\n    private readonly _logFunc;\n    private config;\n    private _customHttpHeaders;\n    private _customParams;\n    private _withCredentials;\n    private _loggerMonitor;\n    constructor(mapperService: NGXMapperService, httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig, platformId: any, datePipe: DatePipe);\n    trace(message: any, ...additional: any[]): void;\n    debug(message: any, ...additional: any[]): void;\n    info(message: any, ...additional: any[]): void;\n    log(message: any, ...additional: any[]): void;\n    warn(message: any, ...additional: any[]): void;\n    error(message: any, ...additional: any[]): void;\n    fatal(message: any, ...additional: any[]): void;\n    setCustomHttpHeaders(headers: HttpHeaders): void;\n    setCustomParams(params: HttpParams): void;\n    setWithCredentialsOptionValue(withCredentials: boolean): void;\n    registerMonitor(monitor: NGXLoggerMonitor): void;\n    updateConfig(config: LoggerConfig): void;\n    getConfigSnapshot(): LoggerConfig;\n    private _logIE;\n    private _logModern;\n    private _log;\n}\n"]}