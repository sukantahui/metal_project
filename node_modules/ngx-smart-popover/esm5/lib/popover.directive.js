/**
 * @fileoverview added by tsickle
 * Generated from: lib/popover.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This is a continuation of ngx-popover
 * @Reference {github} https://github.com/pleerock/ngx-popover
 */
import { ChangeDetectorRef, ComponentFactoryResolver, Directive, EventEmitter, HostListener, Input, Output, ViewContainerRef, ApplicationRef, Injector } from '@angular/core';
import { PopoverContentComponent } from './popover-content.component';
import { PopoverPlacement } from './popover.placement';
/**
 * \@group Basic Toolkit
 * \@component Popover Directive
 */
var PopoverDirective = /** @class */ (function () {
    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------
    function PopoverDirective(viewContainerRef, cdr, resolver, appRef, injector) {
        this.viewContainerRef = viewContainerRef;
        this.cdr = cdr;
        this.resolver = resolver;
        this.appRef = appRef;
        this.injector = injector;
        // -------------------------------------------------------------------------
        // Properties
        // -------------------------------------------------------------------------
        this.popoverContentComponent = PopoverContentComponent;
        this.popoverOnHover = true;
        this.popoverDismissTimeout = 0;
        this.onShown = new EventEmitter();
        this.onHidden = new EventEmitter();
    }
    // -------------------------------------------------------------------------
    // Event listeners
    // -------------------------------------------------------------------------
    // -------------------------------------------------------------------------
    // Event listeners
    // -------------------------------------------------------------------------
    /**
     * @param {?} evt
     * @return {?}
     */
    PopoverDirective.prototype.showOrHideOnClick = 
    // -------------------------------------------------------------------------
    // Event listeners
    // -------------------------------------------------------------------------
    /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (this.popoverOnHover) {
            return;
        }
        if (this.popoverDisabled) {
            return;
        }
        evt.stopImmediatePropagation();
        this.toggle();
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    PopoverDirective.prototype.showOrHideOnTouch = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        evt.stopImmediatePropagation();
        if (!this.popoverOnHover) {
            return;
        }
        if (this.popoverDisabled) {
            return;
        }
        this.toggle();
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.showOnHover = /**
     * @return {?}
     */
    function () {
        if (!this.popoverOnHover) {
            return;
        }
        if (this.popoverDisabled) {
            return;
        }
        this.show();
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.hideOnHover = /**
     * @return {?}
     */
    function () {
        if (this.popoverCloseOnMouseOutside) {
            return; // don't do anything since we do not control this
        }
        if (!this.popoverOnHover) {
            return;
        }
        if (this.popoverDisabled) {
            return;
        }
        this.hide();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopoverDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['popoverDisabled']) {
            if (changes['popoverDisabled'].currentValue) {
                this.hide();
            }
        }
    };
    /**
     * @protected
     * @param {?} component
     * @return {?}
     */
    PopoverDirective.prototype.createComponent = /**
     * @protected
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(component);
        // Create a component reference from the component
        /** @type {?} */
        var componentRef = this.appendToBody
            ? factory.create(this.injector)
            : this.viewContainerRef.createComponent(factory);
        if (this.appendToBody) {
            // Attach component to the appRef so that it's inside the ng component tree
            this.appRef.attachView(componentRef.hostView);
            // Get DOM element from component
            /** @type {?} */
            var domElem = (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView)))
                .rootNodes[0]));
            // Append DOM element to the body
            document.body.appendChild(domElem);
        }
        return componentRef;
    };
    /**
     * @protected
     * @param {?} componentRef
     * @return {?}
     */
    PopoverDirective.prototype.removeComponent = /**
     * @protected
     * @param {?} componentRef
     * @return {?}
     */
    function (componentRef) {
        if (this.popover) {
            if (this.appendToBody) {
                this.appRef.detachView(componentRef.hostView);
            }
            componentRef.destroy();
        }
    };
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    /**
     * @return {?}
     */
    PopoverDirective.prototype.toggle = 
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    /**
     * @return {?}
     */
    function () {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            if (!this.visible) {
                return;
            }
            this.popover = this.createComponent(this.popoverContentComponent);
            /** @type {?} */
            var popover = (/** @type {?} */ (this.popover.instance));
            popover.popover = this;
            popover.content = (/** @type {?} */ (this.content));
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            if (this.popoverCloseOnClickOutside !== undefined) {
                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;
            }
            if (this.popoverCloseOnMouseOutside !== undefined) {
                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;
            }
            if (this.popoverSize) {
                popover.size = this.popoverSize;
            }
            popover.appendToBody = this.appendToBody;
            popover.onCloseFromOutside.subscribe((/**
             * @return {?}
             */
            function () { return _this.hide(); }));
            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time
            if (this.popoverDismissTimeout > 0) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.hide(); }), this.popoverDismissTimeout);
            }
        }
        else {
            /** @type {?} */
            var popover = (/** @type {?} */ (this.content));
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            if (this.popoverCloseOnClickOutside !== undefined) {
                popover.closeOnClickOutside = this.popoverCloseOnClickOutside;
            }
            if (this.popoverCloseOnMouseOutside !== undefined) {
                popover.closeOnMouseOutside = this.popoverCloseOnMouseOutside;
            }
            if (this.popoverSize) {
                popover.size = this.popoverSize;
            }
            popover.appendToBody = this.appendToBody;
            popover.onCloseFromOutside.subscribe((/**
             * @return {?}
             */
            function () { return _this.hide(); }));
            // if dismissTimeout option is set, then this popover will be dismissed in dismissTimeout time
            if (this.popoverDismissTimeout > 0) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.hide(); }), this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.cdr.detectChanges();
        this.onShown.emit(this);
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        this.removeComponent(this.popover);
        if (this.content instanceof PopoverContentComponent) {
            ((/** @type {?} */ (this.content))).hideFromPopover();
        }
        this.cdr.detectChanges();
        this.onHidden.emit(this);
    };
    /**
     * @return {?}
     */
    PopoverDirective.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return this.viewContainerRef.element.nativeElement;
    };
    PopoverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[popover]',
                    exportAs: 'popover'
                },] }
    ];
    /** @nocollapse */
    PopoverDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: ApplicationRef },
        { type: Injector }
    ]; };
    PopoverDirective.propDecorators = {
        content: [{ type: Input, args: ['popover',] }],
        popoverSize: [{ type: Input }],
        popoverDisabled: [{ type: Input }],
        popoverAnimation: [{ type: Input }],
        popoverPlacement: [{ type: Input }],
        popoverTitle: [{ type: Input }],
        popoverOnHover: [{ type: Input }],
        popoverCloseOnClickOutside: [{ type: Input }],
        popoverCloseOnMouseOutside: [{ type: Input }],
        popoverDismissTimeout: [{ type: Input }],
        appendToBody: [{ type: Input }],
        onShown: [{ type: Output }],
        onHidden: [{ type: Output }],
        showOrHideOnClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        showOrHideOnTouch: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        showOnHover: [{ type: HostListener, args: ['focusin',] }, { type: HostListener, args: ['mouseenter',] }],
        hideOnHover: [{ type: HostListener, args: ['focusout',] }, { type: HostListener, args: ['mouseleave',] }]
    };
    return PopoverDirective;
}());
export { PopoverDirective };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.popoverContentComponent;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.popover;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.visible;
    /** @type {?} */
    PopoverDirective.prototype.content;
    /** @type {?} */
    PopoverDirective.prototype.popoverSize;
    /** @type {?} */
    PopoverDirective.prototype.popoverDisabled;
    /** @type {?} */
    PopoverDirective.prototype.popoverAnimation;
    /** @type {?} */
    PopoverDirective.prototype.popoverPlacement;
    /** @type {?} */
    PopoverDirective.prototype.popoverTitle;
    /** @type {?} */
    PopoverDirective.prototype.popoverOnHover;
    /** @type {?} */
    PopoverDirective.prototype.popoverCloseOnClickOutside;
    /** @type {?} */
    PopoverDirective.prototype.popoverCloseOnMouseOutside;
    /** @type {?} */
    PopoverDirective.prototype.popoverDismissTimeout;
    /** @type {?} */
    PopoverDirective.prototype.appendToBody;
    /** @type {?} */
    PopoverDirective.prototype.onShown;
    /** @type {?} */
    PopoverDirective.prototype.onHidden;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.viewContainerRef;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.cdr;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.resolver;
    /**
     * @type {?}
     * @protected
     */
    PopoverDirective.prototype.appRef;
    /**
     * @type {?}
     * @private
     */
    PopoverDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,