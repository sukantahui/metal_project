{"version":3,"file":"popover.directive.d.ts","sources":["popover.directive.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA","sourcesContent":["/**\n * This is a continuation of ngx-popover\n * @Reference {github} https://github.com/pleerock/ngx-popover\n */\nimport { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, EventEmitter, OnChanges, SimpleChange, ViewContainerRef, ApplicationRef, Injector, Type } from '@angular/core';\nimport { PopoverContentComponent } from './popover-content.component';\nimport { PopoverPlacement } from './popover.placement';\n/**\n* @group Basic Toolkit\n* @component Popover Directive\n*/\nexport declare class PopoverDirective implements OnChanges {\n    protected viewContainerRef: ViewContainerRef;\n    protected cdr: ChangeDetectorRef;\n    protected resolver: ComponentFactoryResolver;\n    protected appRef: ApplicationRef;\n    private injector;\n    protected popoverContentComponent: typeof PopoverContentComponent;\n    protected popover: ComponentRef<PopoverContentComponent>;\n    protected visible: boolean;\n    constructor(viewContainerRef: ViewContainerRef, cdr: ChangeDetectorRef, resolver: ComponentFactoryResolver, appRef: ApplicationRef, injector: Injector);\n    content: string | PopoverContentComponent;\n    popoverSize: 'small' | 'medium-small' | 'medium' | 'large' | 'auto';\n    popoverDisabled: boolean;\n    popoverAnimation: boolean;\n    popoverPlacement: PopoverPlacement;\n    popoverTitle: string;\n    popoverOnHover: boolean;\n    popoverCloseOnClickOutside: boolean;\n    popoverCloseOnMouseOutside: boolean;\n    popoverDismissTimeout: number;\n    appendToBody: boolean;\n    onShown: EventEmitter<PopoverDirective>;\n    onHidden: EventEmitter<PopoverDirective>;\n    showOrHideOnClick(evt: Event): void;\n    showOrHideOnTouch(evt: Event): void;\n    showOnHover(): void;\n    hideOnHover(): void;\n    ngOnChanges(changes: {\n        [propertyName: string]: SimpleChange;\n    }): void;\n    protected createComponent(component: Type<any>): ComponentRef<any>;\n    protected removeComponent(componentRef: ComponentRef<any>): void;\n    toggle(): void;\n    show(): void;\n    hide(): void;\n    getElement(): HTMLElement;\n}\n"]}