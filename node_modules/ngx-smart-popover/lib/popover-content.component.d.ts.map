{"version":3,"file":"popover-content.component.d.ts","sources":["popover-content.component.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA","sourcesContent":["/**\n * This is a continuation of ngx-popover\n * @Reference {github} https://github.com/pleerock/ngx-popover\n */\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { PopoverDirective } from './popover.directive';\nimport { PopoverPlacement } from './popover.placement';\nexport declare class PopoverContentComponent implements AfterViewInit, OnDestroy {\n    protected element: ElementRef;\n    protected cdr: ChangeDetectorRef;\n    protected renderer: Renderer2;\n    content: string;\n    placement: PopoverPlacement;\n    title: string;\n    parentClass: string;\n    animation: boolean;\n    closeOnClickOutside: boolean;\n    closeOnMouseOutside: boolean;\n    appendToBody: boolean;\n    size: 'small' | 'medium-small' | 'medium' | 'large' | 'auto';\n    popoverDiv: ElementRef;\n    popover: PopoverDirective;\n    onCloseFromOutside: EventEmitter<{}>;\n    top: number;\n    left: number;\n    isIn: boolean;\n    effectivePlacement: string;\n    opacity: number;\n    transitionEnabled: boolean;\n    windowWidth: number;\n    windowHeight: number;\n    listenClickFunc: any;\n    listenMouseFunc: any;\n    listenTouchFunc: any;\n    /**\n     * Closes dropdown if user clicks outside of this directive.\n     */\n    onDocumentMouseDown: (event: any) => void;\n    constructor(element: ElementRef, cdr: ChangeDetectorRef, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    onResize(event: any): void;\n    updatePosition(): void;\n    show(): void;\n    hide(): void;\n    hideFromPopover(): void;\n    protected positionElements(hostEl: HTMLElement, targetEl: HTMLElement, positionStr: PopoverPlacement, appendToBody?: boolean): {\n        top: number;\n        left: number;\n    };\n    protected position(nativeEl: HTMLElement): {\n        width: number;\n        height: number;\n        top: number;\n        left: number;\n    };\n    protected offset(nativeEl: any): {\n        width: number;\n        height: number;\n        top: number;\n        left: number;\n    };\n    protected getStyle(nativeEl: HTMLElement, cssProp: string): string;\n    protected isStaticPositioned(nativeEl: HTMLElement): boolean;\n    protected parentOffsetEl(nativeEl: HTMLElement): any;\n    protected getEffectivePlacement(placement: string, hostElement: HTMLElement, targetElement: HTMLElement): string;\n}\n"]}