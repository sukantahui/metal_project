{"version":3,"file":"observe-content.d.ts","sources":["observe-content.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;AAEA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, OnDestroy, AfterContentInit, NgZone } from '@angular/core';\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\nexport declare class MatMutationObserverFactory {\n    create(callback: MutationCallback): MutationObserver | null;\n}\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nexport declare class ObserveContent implements AfterContentInit, OnDestroy {\n    private _mutationObserverFactory;\n    private _elementRef;\n    private _ngZone;\n    private _observer;\n    /** Event emitted for each change in the element's content. */\n    event: EventEmitter<MutationRecord[]>;\n    /** Used for debouncing the emitted values to the observeContent event. */\n    private _debouncer;\n    /** Debounce interval for emitting the changes. */\n    debounce: number;\n    constructor(_mutationObserverFactory: MatMutationObserverFactory, _elementRef: ElementRef, _ngZone: NgZone);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n}\nexport declare class ObserversModule {\n}\n"]}