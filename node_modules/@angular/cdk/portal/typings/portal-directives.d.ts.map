{"version":3,"file":"portal-directives.d.ts","sources":["portal-directives.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;AAEA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, EmbeddedViewRef, TemplateRef, ComponentFactoryResolver, ViewContainerRef, OnDestroy } from '@angular/core';\nimport { Portal, TemplatePortal, ComponentPortal, BasePortalHost } from './portal';\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <ng-template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </ng-template>\n */\nexport declare class TemplatePortalDirective extends TemplatePortal<any> {\n    constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef);\n}\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <ng-template [cdkPortalHost]=\"greeting\"></ng-template>\n */\nexport declare class PortalHostDirective extends BasePortalHost implements OnDestroy {\n    private _componentFactoryResolver;\n    private _viewContainerRef;\n    /** The attached portal. */\n    private _portal;\n    constructor(_componentFactoryResolver: ComponentFactoryResolver, _viewContainerRef: ViewContainerRef);\n    /** @deprecated */\n    _deprecatedPortal: Portal<any> | null;\n    /** Portal associated with the Portal host. */\n    portal: Portal<any> | null;\n    ngOnDestroy(): void;\n    /**\n     * Attach the given ComponentPortal to this PortalHost using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal host.\n     */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;\n}\nexport declare class PortalModule {\n}\n"]}