{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, QueryList, ElementRef, TemplateRef, ChangeDetectorRef, OnChanges } from '@angular/core';\nimport { CdkStepLabel } from './step-label';\nimport { AbstractControl } from '@angular/forms';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * Position state of the content of each step in stepper that is used for transitioning\n * the content into correct position upon step selection change.\n */\nexport declare type StepContentPositionState = 'previous' | 'current' | 'next';\n/** Change event emitted on selection changes. */\nexport declare class StepperSelectionEvent {\n    /** Index of the step now selected. */\n    selectedIndex: number;\n    /** Index of the step previously selected. */\n    previouslySelectedIndex: number;\n    /** The step instance now selected. */\n    selectedStep: CdkStep;\n    /** The step instance previously selected. */\n    previouslySelectedStep: CdkStep;\n}\nexport declare class CdkStep implements OnChanges {\n    private _stepper;\n    /** Template for step label if it exists. */\n    stepLabel: CdkStepLabel;\n    /** Template for step content. */\n    content: TemplateRef<any>;\n    /** The top level abstract control of the step. */\n    stepControl: AbstractControl;\n    /** Whether user has seen the expanded step content or not. */\n    interacted: boolean;\n    /** Label of the step. */\n    label: string;\n    editable: any;\n    private _editable;\n    /** Whether the completion of step is optional or not. */\n    optional: any;\n    private _optional;\n    /** Return whether step is completed or not. */\n    completed: any;\n    private _customCompleted;\n    private readonly _defaultCompleted;\n    constructor(_stepper: CdkStepper);\n    /** Selects this step component. */\n    select(): void;\n    ngOnChanges(): void;\n}\nexport declare class CdkStepper {\n    private _dir;\n    private _changeDetectorRef;\n    /** The list of step components that the stepper is holding. */\n    _steps: QueryList<CdkStep>;\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<ElementRef>;\n    /** Whether the validity of previous steps should be checked or not. */\n    linear: any;\n    private _linear;\n    /** The index of the selected step. */\n    selectedIndex: number;\n    private _selectedIndex;\n    /** The step that is selected. */\n    selected: CdkStep;\n    /** Event emitted when the selected step has changed. */\n    selectionChange: EventEmitter<StepperSelectionEvent>;\n    /** The index of the step that the focus can be set. */\n    _focusIndex: number;\n    /** Used to track unique ID for each stepper component. */\n    _groupId: number;\n    constructor(_dir: Directionality, _changeDetectorRef: ChangeDetectorRef);\n    /** Selects and focuses the next step in list. */\n    next(): void;\n    /** Selects and focuses the previous step in list. */\n    previous(): void;\n    /** Returns a unique id for each step label element. */\n    _getStepLabelId(i: number): string;\n    /** Returns unique id for each step content element. */\n    _getStepContentId(i: number): string;\n    /** Marks the component to be change detected. */\n    _stateChanged(): void;\n    /** Returns position state of the step with the given index. */\n    _getAnimationDirection(index: number): StepContentPositionState;\n    /** Returns the type of icon to be displayed. */\n    _getIndicatorType(index: number): 'number' | 'edit' | 'done';\n    private _emitStepperSelectionEvent(newIndex);\n    _onKeydown(event: KeyboardEvent): void;\n    private _focusNextStep();\n    private _focusPreviousStep();\n    private _focusStep(index);\n    private _anyControlsInvalid(index);\n    private _layoutDirection();\n}\n"]}