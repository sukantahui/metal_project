{"version":3,"file":"overlay-directives.d.ts","sources":["overlay-directives.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, EventEmitter, InjectionToken, OnChanges, OnDestroy, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport { Overlay } from './overlay';\nimport { OverlayRef } from './overlay-ref';\nimport { ConnectedOverlayPositionChange, ConnectionPositionPair } from './position/connected-position';\nimport { RepositionScrollStrategy, ScrollStrategy } from './scroll/index';\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nexport declare const MAT_CONNECTED_OVERLAY_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;\n/** @docs-private */\nexport declare const MAT_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: typeof Overlay[];\n    useFactory: (overlay: Overlay) => () => RepositionScrollStrategy;\n};\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nexport declare class OverlayOrigin {\n    elementRef: ElementRef;\n    constructor(elementRef: ElementRef);\n}\n/**\n * Directive to facilitate declarative creation of an Overlay using a ConnectedPositionStrategy.\n */\nexport declare class ConnectedOverlayDirective implements OnDestroy, OnChanges {\n    private _overlay;\n    private _renderer;\n    private _scrollStrategy;\n    private _dir;\n    private _overlayRef;\n    private _templatePortal;\n    private _hasBackdrop;\n    private _backdropSubscription;\n    private _positionSubscription;\n    private _offsetX;\n    private _offsetY;\n    private _position;\n    private _escapeListener;\n    /** Origin for the connected overlay. */\n    origin: OverlayOrigin;\n    /** Registered connected position pairs. */\n    positions: ConnectionPositionPair[];\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    offsetX: number;\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    offsetY: number;\n    /** The width of the overlay panel. */\n    width: number | string;\n    /** The height of the overlay panel. */\n    height: number | string;\n    /** The min width of the overlay panel. */\n    minWidth: number | string;\n    /** The min height of the overlay panel. */\n    minHeight: number | string;\n    /** The custom class to be set on the backdrop element. */\n    backdropClass: string;\n    /** Strategy to be used when handling scroll events while the overlay is open. */\n    scrollStrategy: ScrollStrategy;\n    /** Whether the overlay is open. */\n    open: boolean;\n    /** Whether or not the overlay should attach a backdrop. */\n    hasBackdrop: any;\n    /** @deprecated */\n    _deprecatedOrigin: OverlayOrigin;\n    /** @deprecated */\n    _deprecatedPositions: ConnectionPositionPair[];\n    /** @deprecated */\n    _deprecatedOffsetX: number;\n    /** @deprecated */\n    _deprecatedOffsetY: number;\n    /** @deprecated */\n    _deprecatedWidth: number | string;\n    /** @deprecated */\n    _deprecatedHeight: number | string;\n    /** @deprecated */\n    _deprecatedMinWidth: number | string;\n    /** @deprecated */\n    _deprecatedMinHeight: number | string;\n    /** @deprecated */\n    _deprecatedBackdropClass: string;\n    /** @deprecated */\n    _deprecatedScrollStrategy: ScrollStrategy;\n    /** @deprecated */\n    _deprecatedOpen: boolean;\n    /** @deprecated */\n    _deprecatedHasBackdrop: any;\n    /** Event emitted when the backdrop is clicked. */\n    backdropClick: EventEmitter<void>;\n    /** Event emitted when the position has changed. */\n    positionChange: EventEmitter<ConnectedOverlayPositionChange>;\n    /** Event emitted when the overlay has been attached. */\n    attach: EventEmitter<void>;\n    /** Event emitted when the overlay has been detached. */\n    detach: EventEmitter<void>;\n    constructor(_overlay: Overlay, _renderer: Renderer2, templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef, _scrollStrategy: any, _dir: Directionality);\n    /** The associated overlay reference. */\n    readonly overlayRef: OverlayRef;\n    /** The element's layout direction. */\n    readonly dir: Direction;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    /** Creates an overlay */\n    private _createOverlay();\n    /** Builds the overlay config based on the directive's inputs */\n    private _buildConfig();\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    private _createPositionStrategy();\n    private _handlePositionChanges(strategy);\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    private _attachOverlay();\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    private _detachOverlay();\n    /** Destroys the overlay created by this directive. */\n    private _destroyOverlay();\n    /** Sets the event listener that closes the overlay when pressing Escape. */\n    private _initEscapeListener();\n}\n"]}