{"version":3,"file":"aria-describer.d.ts","sources":["aria-describer.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\n/**\n * Interface used to register message elements and keep a count of how many registrations have\n * the same message and the reference to the message element used for the aria-describedby.\n */\nexport interface RegisteredMessage {\n    messageElement: Element;\n    referenceCount: number;\n}\n/** ID used for the body container where all messages are appended. */\nexport declare const MESSAGES_CONTAINER_ID = \"cdk-describedby-message-container\";\n/** ID prefix used for each created message element. */\nexport declare const CDK_DESCRIBEDBY_ID_PREFIX = \"cdk-describedby-message\";\n/** Attribute given to each host element that is described by a message element. */\nexport declare const CDK_DESCRIBEDBY_HOST_ATTRIBUTE = \"cdk-describedby-host\";\n/**\n * Utility that creates visually hidden elements with a message content. Useful for elements that\n * want to use aria-describedby to further describe themselves without adding additional visual\n * content.\n * @docs-private\n */\nexport declare class AriaDescriber {\n    private _platform;\n    constructor(_platform: Platform);\n    /**\n     * Adds to the host element an aria-describedby reference to a hidden element that contains\n     * the message. If the same message has already been registered, then it will reuse the created\n     * message element.\n     */\n    describe(hostElement: Element, message: string): void;\n    /** Removes the host element's aria-describedby reference to the message element. */\n    removeDescription(hostElement: Element, message: string): void;\n    /** Unregisters all created message elements and removes the message container. */\n    ngOnDestroy(): void;\n}\n/** @docs-private */\nexport declare function ARIA_DESCRIBER_PROVIDER_FACTORY(parentDispatcher: AriaDescriber, platform: Platform): AriaDescriber;\n/** @docs-private */\nexport declare const ARIA_DESCRIBER_PROVIDER: {\n    provide: typeof AriaDescriber;\n    deps: (Optional[] | typeof Platform)[];\n    useFactory: (parentDispatcher: AriaDescriber, platform: Platform) => AriaDescriber;\n};\n"]}