{"version":3,"file":"focus-trap.d.ts","sources":["focus-trap.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;AAWA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, NgZone, OnDestroy, AfterContentInit } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { InteractivityChecker } from './interactivity-checker';\n/**\n * Class that allows for trapping focus within a DOM element.\n *\n * NOTE: This class currently uses a very simple (naive) approach to focus trapping.\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\n * Things like tabIndex > 0, flex `order`, and shadow roots can cause to two to misalign.\n * This will be replaced with a more intelligent solution before the library is considered stable.\n */\nexport declare class FocusTrap {\n    private _element;\n    private _platform;\n    private _checker;\n    private _ngZone;\n    private _startAnchor;\n    private _endAnchor;\n    /** Whether the focus trap is active. */\n    enabled: boolean;\n    private _enabled;\n    constructor(_element: HTMLElement, _platform: Platform, _checker: InteractivityChecker, _ngZone: NgZone, deferAnchors?: boolean);\n    /** Destroys the focus trap by cleaning up the anchors. */\n    destroy(): void;\n    /**\n     * Inserts the anchors into the DOM. This is usually done automatically\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\n     */\n    attachAnchors(): void;\n    /**\n     * Waits for the zone to stabilize, then either focuses the first element that the\n     * user specified, or the first tabbable element.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusInitialElementWhenReady(): Promise<boolean>;\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the first tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusFirstTabbableElementWhenReady(): Promise<boolean>;\n    /**\n     * Waits for the zone to stabilize, then focuses\n     * the last tabbable element within the focus trap region.\n     * @returns Returns a promise that resolves with a boolean, depending\n     * on whether focus was moved successfuly.\n     */\n    focusLastTabbableElementWhenReady(): Promise<boolean>;\n    /**\n     * Get the specified boundary element of the trapped region.\n     * @param bound The boundary to get (start or end of trapped region).\n     * @returns The boundary element.\n     */\n    private _getRegionBoundary(bound);\n    /**\n     * Focuses the element that should be focused when the focus trap is initialized.\n     * @returns Returns whether focus was moved successfuly.\n     */\n    focusInitialElement(): boolean;\n    /**\n     * Focuses the first tabbable element within the focus trap region.\n     * @returns Returns whether focus was moved successfuly.\n     */\n    focusFirstTabbableElement(): boolean;\n    /**\n     * Focuses the last tabbable element within the focus trap region.\n     * @returns Returns whether focus was moved successfuly.\n     */\n    focusLastTabbableElement(): boolean;\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n    private _getFirstTabbableElement(root);\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n    private _getLastTabbableElement(root);\n    /** Creates an anchor element. */\n    private _createAnchor();\n    /** Executes a function when the zone is stable. */\n    private _executeOnStable(fn);\n}\n/** Factory that allows easy instantiation of focus traps. */\nexport declare class FocusTrapFactory {\n    private _checker;\n    private _platform;\n    private _ngZone;\n    constructor(_checker: InteractivityChecker, _platform: Platform, _ngZone: NgZone);\n    create(element: HTMLElement, deferAnchors?: boolean): FocusTrap;\n}\n/**\n * Directive for trapping focus within a region.\n * @deprecated\n */\nexport declare class FocusTrapDeprecatedDirective implements OnDestroy, AfterContentInit {\n    private _elementRef;\n    private _focusTrapFactory;\n    focusTrap: FocusTrap;\n    /** Whether the focus trap is active. */\n    disabled: boolean;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory);\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n}\n/** Directive for trapping focus within a region. */\nexport declare class FocusTrapDirective implements OnDestroy, AfterContentInit {\n    private _elementRef;\n    private _focusTrapFactory;\n    focusTrap: FocusTrap;\n    /** Whether the focus trap is active. */\n    enabled: boolean;\n    constructor(_elementRef: ElementRef, _focusTrapFactory: FocusTrapFactory);\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n}\n"]}