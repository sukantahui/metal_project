{"version":3,"file":"row.d.ts","sources":["row.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;;;;AAGA;;;;;AAGA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { IterableChanges, IterableDiffer, IterableDiffers, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { CdkCellDef } from './cell';\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport declare const CDK_ROW_TEMPLATE: string;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nexport declare abstract class BaseRowDef {\n    template: TemplateRef<any>;\n    protected _differs: IterableDiffers;\n    /** The columns to be displayed on this row. */\n    columns: string[];\n    /** Differ used to check if any changes were made to the columns. */\n    protected _columnsDiffer: IterableDiffer<any>;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers);\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff(): IterableChanges<any> | null;\n}\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport declare class CdkHeaderRowDef extends BaseRowDef {\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers);\n}\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nexport declare class CdkRowDef<T> extends BaseRowDef {\n    /**\n     * Function that should return true if this row template should be used for the provided row data\n     * and index. If left undefined, this row will be considered the default row template to use when\n     * no other when functions return true for the data.\n     * For every row, there must be at least one when function that passes or an undefined to default.\n     */\n    when: (rowData: T, index: number) => boolean;\n    constructor(template: TemplateRef<any>, _differs: IterableDiffers);\n}\n/** Context provided to the row cells */\nexport interface CdkCellOutletRowContext<T> {\n    /** Data for the row that this cell is located within. */\n    $implicit: T;\n    /** Index location of the row that this cell is located within. */\n    index?: number;\n    /** Length of the number of total rows. */\n    count?: number;\n    /** True if this cell is contained in the first row. */\n    first?: boolean;\n    /** True if this cell is contained in the last row. */\n    last?: boolean;\n    /** True if this cell is contained in a row with an even-numbered index. */\n    even?: boolean;\n    /** True if this cell is contained in a row with an odd-numbered index. */\n    odd?: boolean;\n}\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nexport declare class CdkCellOutlet {\n    _viewContainer: ViewContainerRef;\n    /** The ordered list of cells to render within this outlet's view container */\n    cells: CdkCellDef[];\n    /** The data context to be provided to each cell */\n    context: any;\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static mostRecentCellOutlet: CdkCellOutlet;\n    constructor(_viewContainer: ViewContainerRef);\n}\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nexport declare class CdkHeaderRow {\n}\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nexport declare class CdkRow {\n}\n"]}