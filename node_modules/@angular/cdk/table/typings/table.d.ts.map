{"version":3,"file":"table.d.ts","sources":["table.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;AAGA;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ChangeDetectorRef, ElementRef, IterableDiffers, QueryList, Renderer2, TrackByFunction, ViewContainerRef } from '@angular/core';\nimport { CollectionViewer, DataSource } from '@angular/cdk/collections';\nimport { CdkHeaderRowDef, CdkRowDef } from './row';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { CdkColumnDef } from './cell';\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nexport declare class RowPlaceholder {\n    viewContainer: ViewContainerRef;\n    constructor(viewContainer: ViewContainerRef);\n}\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nexport declare class HeaderRowPlaceholder {\n    viewContainer: ViewContainerRef;\n    constructor(viewContainer: ViewContainerRef);\n}\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nexport declare const CDK_TABLE_TEMPLATE: string;\n/**\n * A data table that connects with a data source to retrieve data of type `T` and renders\n * a header row and data rows. Updates the rows when new data is provided by the data source.\n */\nexport declare class CdkTable<T> implements CollectionViewer {\n    private readonly _differs;\n    private readonly _changeDetectorRef;\n    /** Subject that emits when the component has been destroyed. */\n    private _onDestroy;\n    /** Latest data provided by the data source through the connect interface. */\n    private _data;\n    /** Subscription that listens for the data provided by the data source. */\n    private _renderChangeSubscription;\n    /** Map of all the user's defined columns (header and data cell template) identified by name. */\n    private _columnDefsByName;\n    /** Differ used to find the changes in the data provided by the data source. */\n    private _dataDiffer;\n    /** Stores the row definition that does not have a when predicate. */\n    private _defaultRowDef;\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    trackBy: TrackByFunction<T>;\n    private _trackByFn;\n    /**\n     * Provides a stream containing the latest data array to render. Influenced by the table's\n     * stream of view window (what rows are currently on screen).\n     */\n    dataSource: DataSource<T>;\n    private _dataSource;\n    /**\n     * Stream containing the latest information on what rows are being displayed on screen.\n     * Can be used by the data source to as a heuristic of what data should be provided.\n     */\n    viewChange: BehaviorSubject<{\n        start: number;\n        end: number;\n    }>;\n    _rowPlaceholder: RowPlaceholder;\n    _headerRowPlaceholder: HeaderRowPlaceholder;\n    /**\n     * The column definitions provided by the user that contain what the header and cells should\n     * render for each column.\n     */\n    _columnDefs: QueryList<CdkColumnDef>;\n    /** Template definition used as the header container. */\n    _headerDef: CdkHeaderRowDef;\n    /** Set of template definitions that used as the data row containers. */\n    _rowDefs: QueryList<CdkRowDef<T>>;\n    constructor(_differs: IterableDiffers, _changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef, renderer: Renderer2, role: string);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngOnDestroy(): void;\n    /** Update the map containing the content's column definitions. */\n    private _cacheColumnDefsByName();\n    /**\n     * Check if the header or rows have changed what columns they want to display. If there is a diff,\n     * then re-render that section.\n     */\n    private _renderUpdatedColumns();\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row placeholder. Otherwise start listening for new data.\n     */\n    private _switchDataSource(dataSource);\n    /** Set up a subscription for the data provided by the data source. */\n    private _observeRenderChanges();\n    /**\n     * Create the embedded view for the header template and place it in the header row view container.\n     */\n    private _renderHeaderRow();\n    /** Check for changes made in the data and render each change (row added/removed/moved). */\n    private _renderRowChanges();\n    /**\n     * Finds the matching row definition that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definition that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDef(data: T, i: number): CdkRowDef<T>;\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    private _insertRow(rowData, index);\n    /**\n     * Updates the context for each row to reflect any data changes that may have caused\n     * rows to be added, removed, or moved. The view container contains the same context\n     * that was provided to each of its cells.\n     */\n    private _updateRowContext();\n    /**\n     * Returns the cell template definitions to insert into the header\n     * as defined by its list of columns to display.\n     */\n    private _getHeaderCellTemplatesForRow(headerDef);\n    /**\n     * Returns the cell template definitions to insert in the provided row\n     * as defined by its list of columns to display.\n     */\n    private _getCellTemplatesForRow(rowDef);\n}\n"]}