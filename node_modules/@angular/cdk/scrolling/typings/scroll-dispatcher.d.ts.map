{"version":3,"file":"scroll-dispatcher.d.ts","sources":["scroll-dispatcher.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, NgZone, Optional } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Scrollable } from './scrollable';\n/** Time in ms to throttle the scrolling events by default. */\nexport declare const DEFAULT_SCROLL_TIME = 20;\n/**\n * Service contained all registered Scrollable references and emits an event when any one of the\n * Scrollable references emit a scrolled event.\n */\nexport declare class ScrollDispatcher {\n    private _ngZone;\n    private _platform;\n    constructor(_ngZone: NgZone, _platform: Platform);\n    /** Subject for notifying that a registered scrollable reference element has been scrolled. */\n    _scrolled: Subject<void>;\n    /** Keeps track of the global `scroll` and `resize` subscriptions. */\n    _globalSubscription: Subscription | null;\n    /** Keeps track of the amount of subscriptions to `scrolled`. Used for cleaning up afterwards. */\n    private _scrolledCount;\n    /**\n     * Map of all the scrollable references that are registered with the service and their\n     * scroll event subscriptions.\n     */\n    scrollableReferences: Map<Scrollable, Subscription>;\n    /**\n     * Registers a Scrollable with the service and listens for its scrolled events. When the\n     * scrollable is scrolled, the service emits the event in its scrolled observable.\n     * @param scrollable Scrollable instance to be registered.\n     */\n    register(scrollable: Scrollable): void;\n    /**\n     * Deregisters a Scrollable reference and unsubscribes from its scroll event observable.\n     * @param scrollable Scrollable instance to be deregistered.\n     */\n    deregister(scrollable: Scrollable): void;\n    /**\n     * Subscribes to an observable that emits an event whenever any of the registered Scrollable\n     * references (or window, document, or body) fire a scrolled event. Can provide a time in ms\n     * to override the default \"throttle\" time.\n     */\n    scrolled(auditTimeInMs: number | undefined, callback: () => any): Subscription;\n    /** Returns all registered Scrollables that contain the provided element. */\n    getScrollContainers(elementRef: ElementRef): Scrollable[];\n    /** Returns true if the element is contained within the provided Scrollable. */\n    scrollableContainsElement(scrollable: Scrollable, elementRef: ElementRef): boolean;\n    /** Sends a notification that a scroll event has been fired. */\n    _notify(): void;\n}\n/** @docs-private */\nexport declare function SCROLL_DISPATCHER_PROVIDER_FACTORY(parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform): ScrollDispatcher;\n/** @docs-private */\nexport declare const SCROLL_DISPATCHER_PROVIDER: {\n    provide: typeof ScrollDispatcher;\n    deps: (Optional[] | typeof NgZone | typeof Platform)[];\n    useFactory: (parentDispatcher: ScrollDispatcher, ngZone: NgZone, platform: Platform) => ScrollDispatcher;\n};\n"]}