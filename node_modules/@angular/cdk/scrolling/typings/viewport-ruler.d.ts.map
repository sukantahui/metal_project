{"version":3,"file":"viewport-ruler.d.ts","sources":["viewport-ruler.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Optional, NgZone, OnDestroy } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { ScrollDispatcher } from './scroll-dispatcher';\nimport { Observable } from 'rxjs/Observable';\n/** Time in ms to throttle the resize events by default. */\nexport declare const DEFAULT_RESIZE_TIME = 20;\n/**\n * Simple utility for getting the bounds of the browser viewport.\n * @docs-private\n */\nexport declare class ViewportRuler implements OnDestroy {\n    /** Cached document client rectangle. */\n    private _documentRect?;\n    /** Stream of viewport change events. */\n    private _change;\n    /** Subscriptions to streams that invalidate the cached viewport dimensions. */\n    private _invalidateCacheSubscriptions;\n    constructor(platform: Platform, ngZone: NgZone, scrollDispatcher: ScrollDispatcher);\n    ngOnDestroy(): void;\n    /** Gets a ClientRect for the viewport's bounds. */\n    getViewportRect(documentRect?: ClientRect | undefined): ClientRect;\n    /**\n     * Gets the (top, left) scroll position of the viewport.\n     * @param documentRect\n     */\n    getViewportScrollPosition(documentRect?: ClientRect | undefined): {\n        top: number;\n        left: number;\n    };\n    /**\n     * Returns a stream that emits whenever the size of the viewport changes.\n     * @param throttle Time in milliseconds to throttle the stream.\n     */\n    change(throttleTime?: number): Observable<string>;\n    /** Caches the latest client rectangle of the document element. */\n    _cacheViewportGeometry(): void;\n}\n/** @docs-private */\nexport declare function VIEWPORT_RULER_PROVIDER_FACTORY(parentRuler: ViewportRuler, platform: Platform, ngZone: NgZone, scrollDispatcher: ScrollDispatcher): ViewportRuler;\n/** @docs-private */\nexport declare const VIEWPORT_RULER_PROVIDER: {\n    provide: typeof ViewportRuler;\n    deps: (typeof ScrollDispatcher | Optional[] | typeof NgZone | typeof Platform)[];\n    useFactory: (parentRuler: ViewportRuler, platform: Platform, ngZone: NgZone, scrollDispatcher: ScrollDispatcher) => ViewportRuler;\n};\n"]}