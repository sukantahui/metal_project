{"version":3,"file":"autocomplete.d.ts","sources":["autocomplete.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ElementRef, QueryList, TemplateRef, ChangeDetectorRef, EventEmitter } from '@angular/core';\nimport { MatOption, MatOptgroup } from '@angular/material/core';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\n/** Event object that is emitted when an autocomplete option is selected */\nexport declare class MatAutocompleteSelectedEvent {\n    source: MatAutocomplete;\n    option: MatOption;\n    constructor(source: MatAutocomplete, option: MatOption);\n}\nexport declare class MatAutocomplete implements AfterContentInit {\n    private _changeDetectorRef;\n    private _elementRef;\n    /** Manages active item in option list based on key events. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean;\n    /** Whether the autocomplete panel is open. */\n    readonly isOpen: boolean;\n    _isOpen: boolean;\n    /** @docs-private */\n    template: TemplateRef<any>;\n    /** Element for the panel containing the autocomplete options. */\n    panel: ElementRef;\n    /** @docs-private */\n    options: QueryList<MatOption>;\n    /** @docs-private */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith: ((value: any) => string) | null;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected: EventEmitter<MatAutocompleteSelectedEvent>;\n    /**\n     * Takes classes set on the host md-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    classList: string;\n    _classList: {\n        [key: string]: boolean;\n    };\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _elementRef: ElementRef);\n    ngAfterContentInit(): void;\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop: number): void;\n    /** Returns the panel's scrollTop. */\n    _getScrollTop(): number;\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility(): void;\n    /** Emits the `select` event. */\n    _emitSelectEvent(option: MatOption): void;\n}\n"]}