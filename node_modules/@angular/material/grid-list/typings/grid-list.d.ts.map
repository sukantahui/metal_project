{"version":3,"file":"grid-list.d.ts","sources":["grid-list.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentChecked, OnInit, QueryList, Renderer2, ElementRef } from '@angular/core';\nimport { MatGridTile } from './grid-tile';\nimport { Directionality } from '@angular/cdk/bidi';\nexport declare class MatGridList implements OnInit, AfterContentChecked {\n    private _renderer;\n    private _element;\n    private _dir;\n    /** Number of columns being rendered. */\n    private _cols;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     */\n    private _rowHeight;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    private _gutter;\n    /** Sets position and size styles for a tile */\n    private _tileStyler;\n    /** Query list of tiles that are being rendered. */\n    _tiles: QueryList<MatGridTile>;\n    constructor(_renderer: Renderer2, _element: ElementRef, _dir: Directionality);\n    /** Amount of columns in the grid list. */\n    cols: any;\n    /** Size of the grid list's gutter in pixels. */\n    gutterSize: any;\n    /** Set internal representation of row height from the user-provided value. */\n    rowHeight: string | number;\n    ngOnInit(): void;\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     */\n    ngAfterContentChecked(): void;\n    /** Throw a friendly error if cols property is missing */\n    private _checkCols();\n    /** Default to equal width:height if rowHeight property is missing */\n    private _checkRowHeight();\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n    private _setTileStyler(rowHeight);\n    /** Computes and applies the size and position for all children grid tiles. */\n    private _layoutTiles();\n    /** Sets style on the main grid-list element, given the style name and value. */\n    _setListStyle(style: [string, string | null] | null): void;\n}\n"]}