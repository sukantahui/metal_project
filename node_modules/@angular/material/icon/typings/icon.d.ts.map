{"version":3,"file":"icon.d.ts","sources":["icon.d.ts"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA","sourcesContent":["import { ElementRef, OnChanges, OnInit, Renderer2, SimpleChanges } from '@angular/core';\nimport { CanColor } from '@angular/material/core';\nimport { MatIconRegistry } from './icon-registry';\n/** @docs-private */\nexport declare class MatIconBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatIconMixinBase: (new (...args: any[]) => CanColor) & typeof MatIconBase;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\nexport declare class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n    private _iconRegistry;\n    /** Name of the icon in the SVG icon set. */\n    svgIcon: string;\n    /** Font set that the icon is a part of. */\n    fontSet: string;\n    /** Name of an icon within a font set. */\n    fontIcon: string;\n    private _previousFontSetClass;\n    private _previousFontIconClass;\n    constructor(renderer: Renderer2, elementRef: ElementRef, _iconRegistry: MatIconRegistry, ariaHidden: string);\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)\n     */\n    private _splitIconName(iconName);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    private _usingFontIcon();\n    private _setSvgElement(svg);\n    private _clearSvgElement();\n    private _updateFontIconClasses();\n}\n"]}