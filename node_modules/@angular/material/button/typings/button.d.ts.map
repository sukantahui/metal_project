{"version":3,"file":"button.d.ts","sources":["button.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;AACA;;;;;;;;AAMA;;;;;;;;AAMA;;;;;;;;;AAOA;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;AAOA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, OnDestroy, Renderer2 } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { CanColor, CanDisable, CanDisableRipple } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatButtonCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatRaisedButtonCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatIconButtonCssMatStyler {\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nexport declare class MatFab {\n    constructor(button: MatButton, anchor: MatAnchor);\n}\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\nexport declare class MatMiniFab {\n    constructor(button: MatButton, anchor: MatAnchor);\n}\n/** @docs-private */\nexport declare class MatButtonBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatButtonMixinBase: (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisable) & (new (...args: any[]) => CanDisableRipple) & typeof MatButtonBase;\n/**\n * Material design button.\n */\nexport declare class MatButton extends _MatButtonMixinBase implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n    private _platform;\n    private _focusMonitor;\n    /** Whether the button is round. */\n    _isRoundButton: boolean;\n    /** Whether the button is icon button. */\n    _isIconButton: boolean;\n    constructor(renderer: Renderer2, elementRef: ElementRef, _platform: Platform, _focusMonitor: FocusMonitor);\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(): void;\n    _getHostElement(): any;\n    _isRippleDisabled(): boolean;\n    /** Gets whether the button has one of the given attributes with a 'mat-' prefix. */\n    _hasAttributeWithPrefix(...unprefixedAttributeNames: string[]): boolean;\n}\n/**\n * Raised Material design button.\n */\nexport declare class MatAnchor extends MatButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef, renderer: Renderer2);\n    _haltDisabledEvents(event: Event): void;\n}\n"]}