{"version":3,"file":"slide-toggle.d.ts","sources":["slide-toggle.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { CanColor, CanDisable, CanDisableRipple, HammerInput, HasTabIndex, MatRipple } from '@angular/material/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nexport declare const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any;\n/** Change event object emitted by a MatSlideToggle. */\nexport declare class MatSlideToggleChange {\n    source: MatSlideToggle;\n    checked: boolean;\n}\n/** @docs-private */\nexport declare class MatSlideToggleBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatSlideToggleMixinBase: (new (...args: any[]) => HasTabIndex) & (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisableRipple) & (new (...args: any[]) => CanDisable) & typeof MatSlideToggleBase;\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nexport declare class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit, ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n    private _platform;\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private onChange;\n    private onTouched;\n    private _uniqueId;\n    private _slideRenderer;\n    private _required;\n    private _checked;\n    /** Reference to the focus state ripple. */\n    private _focusRipple;\n    /** Name value will be applied to the input element if present */\n    name: string | null;\n    /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /** Whether the slide-toggle element is checked or not */\n    /** Used to set the aria-label attribute on the underlying input element. */\n    ariaLabel: string | null;\n    /** Used to set the aria-labelledby attribute on the underlying input element. */\n    ariaLabelledby: string | null;\n    /** Whether the slide-toggle is required. */\n    required: boolean;\n    /** Whether the slide-toggle element is checked or not */\n    checked: boolean;\n    /** An event will be dispatched each time the slide-toggle changes its value. */\n    change: EventEmitter<MatSlideToggleChange>;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    /** Reference to the underlying input element. */\n    _inputElement: ElementRef;\n    /** Reference to the ripple directive on the thumb container. */\n    _ripple: MatRipple;\n    constructor(elementRef: ElementRef, renderer: Renderer2, _platform: Platform, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, tabIndex: string);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * This function will called if the underlying input changed its value through user interaction.\n     */\n    _onChangeEvent(event: Event): void;\n    _onInputClick(event: Event): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: any): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: any): void;\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Focuses the slide-toggle. */\n    focus(): void;\n    /** Toggles the checked state of the slide-toggle. */\n    toggle(): void;\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin);\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    private _emitChangeEvent();\n    _onDragStart(): void;\n    _onDrag(event: HammerInput): void;\n    _onDragEnd(): void;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n}\n"]}