{"version":3,"file":"button-toggle.d.ts","sources":["button-toggle.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ElementRef, Renderer2, EventEmitter, OnInit, OnDestroy, QueryList, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanDisable } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n/** Acceptable types for a button toggle. */\nexport declare type ToggleType = 'checkbox' | 'radio';\n/** @docs-private */\nexport declare class MatButtonToggleGroupBase {\n}\nexport declare const _MatButtonToggleGroupMixinBase: (new (...args: any[]) => CanDisable) & typeof MatButtonToggleGroupBase;\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any;\n/** Change event object emitted by MatButtonToggle. */\nexport declare class MatButtonToggleChange {\n    /** The MatButtonToggle that emits the event. */\n    source: MatButtonToggle | null;\n    /** The value assigned to the MatButtonToggle. */\n    value: any;\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nexport declare class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase implements ControlValueAccessor, CanDisable {\n    private _changeDetector;\n    /** The value for the button toggle group. Should match currently selected button toggle. */\n    private _value;\n    /** The HTML name attribute applied to toggles in this group. */\n    private _name;\n    /** Whether the button toggle group should be vertical. */\n    private _vertical;\n    /** The currently selected button toggle, should match the value. */\n    private _selected;\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    _controlValueAccessorChangeFn: (value: any) => void;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    _onTouched: () => any;\n    /** Child button toggle buttons. */\n    _buttonToggles: QueryList<MatButtonToggle>;\n    /** `name` attribute for the underlying `input` element. */\n    name: string;\n    /** Whether the toggle group is vertical. */\n    vertical: boolean;\n    /** Value of the toggle group. */\n    value: any;\n    /** Whether the toggle group is selected. */\n    selected: MatButtonToggle | null;\n    /** Event emitted when the group's value changes. */\n    change: EventEmitter<MatButtonToggleChange>;\n    constructor(_changeDetector: ChangeDetectorRef);\n    private _updateButtonToggleNames();\n    private _updateSelectedButtonToggleFromValue();\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback that will be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn On change callback function.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback that will be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn On touch callback function.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n     * @param isDisabled Whether the component should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    private _markButtonTogglesForCheck();\n}\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\nexport declare class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase implements CanDisable {\n    /** Whether the button toggle group should be vertical. */\n    private _vertical;\n    /** Whether the toggle group is vertical. */\n    vertical: boolean;\n}\n/** Single button inside of a toggle group. */\nexport declare class MatButtonToggle implements OnInit, OnDestroy {\n    private _changeDetectorRef;\n    private _buttonToggleDispatcher;\n    private _renderer;\n    private _elementRef;\n    private _focusMonitor;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    /** Whether or not this button toggle is checked. */\n    private _checked;\n    /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n    _type: ToggleType;\n    /** Whether or not this button toggle is disabled. */\n    private _disabled;\n    /** Value assigned to this button toggle. */\n    private _value;\n    /** Whether or not the button toggle is a single selection. */\n    private _isSingleSelector;\n    /** Unregister function for _buttonToggleDispatcher **/\n    private _removeUniqueSelectionListener;\n    _inputElement: ElementRef;\n    /** The parent button toggle group (exclusive selection). Optional. */\n    buttonToggleGroup: MatButtonToggleGroup;\n    /** The parent button toggle group (multiple selection). Optional. */\n    buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n    /** Unique ID for the underlying `input` element. */\n    readonly inputId: string;\n    /** The unique ID for this button toggle. */\n    id: string;\n    /** HTML's 'name' attribute used to group radios for unique selection. */\n    name: string;\n    /** Whether the button is checked. */\n    checked: boolean;\n    /** MatButtonToggleGroup reads this to assign its own value. */\n    value: any;\n    /** Whether the button is disabled. */\n    disabled: boolean;\n    /** Event emitted when the group value changes. */\n    change: EventEmitter<MatButtonToggleChange>;\n    constructor(toggleGroup: MatButtonToggleGroup, toggleGroupMultiple: MatButtonToggleGroupMultiple, _changeDetectorRef: ChangeDetectorRef, _buttonToggleDispatcher: UniqueSelectionDispatcher, _renderer: Renderer2, _elementRef: ElementRef, _focusMonitor: FocusMonitor);\n    ngOnInit(): void;\n    /** Focuses the button. */\n    focus(): void;\n    /** Toggle the state of the current button toggle. */\n    private _toggle();\n    /** Checks the button toggle due to an interaction with the underlying native input. */\n    _onInputChange(event: Event): void;\n    _onInputClick(event: Event): void;\n    /** Dispatch change event with current value. */\n    private _emitChangeEvent();\n    ngOnDestroy(): void;\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck(): void;\n}\n"]}