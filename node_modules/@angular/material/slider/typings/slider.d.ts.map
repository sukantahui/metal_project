{"version":3,"file":"slider.d.ts","sources":["slider.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8LA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanDisable, HammerInput } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport declare const MAT_SLIDER_VALUE_ACCESSOR: any;\n/** A simple change event emitted by the MatSlider component. */\nexport declare class MatSliderChange {\n    /** The MatSlider that changed. */\n    source: MatSlider;\n    /** The new value of the source slider. */\n    value: number | null;\n}\n/** @docs-private */\nexport declare class MatSliderBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatSliderMixinBase: (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisable) & typeof MatSliderBase;\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport declare class MatSlider extends _MatSliderMixinBase implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n    private _focusMonitor;\n    private _changeDetectorRef;\n    private _dir;\n    /** Whether the slider is inverted. */\n    invert: any;\n    private _invert;\n    /** The maximum value that the slider can have. */\n    max: number;\n    private _max;\n    /** The minimum value that the slider can have. */\n    min: number;\n    private _min;\n    /** The values at which the thumb will snap. */\n    step: number;\n    private _step;\n    /** Whether or not to show the thumb label. */\n    thumbLabel: boolean;\n    private _thumbLabel;\n    /** @deprecated */\n    _thumbLabelDeprecated: boolean;\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    tickInterval: 'auto' | number;\n    private _tickInterval;\n    /** @deprecated */\n    _tickIntervalDeprecated: number | \"auto\";\n    /** Value of the slider. */\n    value: number | null;\n    private _value;\n    /** Whether the slider is vertical. */\n    vertical: any;\n    private _vertical;\n    /** Event emitted when the slider value has changed. */\n    change: EventEmitter<MatSliderChange>;\n    /** Event emitted when the slider thumb moves. */\n    input: EventEmitter<MatSliderChange>;\n    /** The value to be used for display purposes. */\n    readonly displayValue: string | number;\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    onTouched: () => any;\n    /** The percentage of the slider that coincides with the value. */\n    readonly percent: number;\n    private _percent;\n    /**\n     * Whether or not the thumb is sliding.\n     * Used to determine if there should be a transition for the thumb and fill track.\n     */\n    _isSliding: boolean;\n    /**\n     * Whether or not the slider is active (clicked or sliding).\n     * Used to shrink and grow the thumb as according to the Material Design spec.\n     */\n    _isActive: boolean;\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    readonly _invertAxis: any;\n    /** Whether the slider is at its minimum value. */\n    readonly _isMinValue: boolean;\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    readonly _thumbGap: number;\n    /** CSS styles for the track background element. */\n    readonly _trackBackgroundStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the track fill element. */\n    readonly _trackFillStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks container element. */\n    readonly _ticksContainerStyles: {\n        [key: string]: string;\n    };\n    /** CSS styles for the ticks element. */\n    readonly _ticksStyles: {\n        [key: string]: string;\n    };\n    readonly _thumbContainerStyles: {\n        [key: string]: string;\n    };\n    /** The size of a tick interval as a percentage of the size of the track. */\n    private _tickIntervalPercent;\n    /** The dimensions of the slider. */\n    private _sliderDimensions;\n    private _controlValueAccessorChangeFn;\n    /** Decimal places to round to, based on the step amount. */\n    private _roundLabelTo;\n    /** Subscription to the Directionality change EventEmitter. */\n    private _dirChangeSubscription;\n    /** The value of the slider when the slide start event fires. */\n    private _valueOnSlideStart;\n    /** Reference to the inner slider wrapper element. */\n    private _sliderWrapper;\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    private readonly _invertMouseCoords;\n    /** The language direction for this slider element. */\n    private readonly _direction;\n    constructor(renderer: Renderer2, elementRef: ElementRef, _focusMonitor: FocusMonitor, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    _onMouseenter(): void;\n    _onClick(event: MouseEvent): void;\n    _onSlide(event: HammerInput): void;\n    _onSlideStart(event: HammerInput | null): void;\n    _onSlideEnd(): void;\n    _onFocus(): void;\n    _onBlur(): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onKeyup(): void;\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    private _increment(numSteps);\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    private _updateValueFromPosition(pos);\n    /** Emits a change event if the current value is different from the last emitted value. */\n    private _emitChangeEvent();\n    /** Emits an input event when the current value is different from the last emitted value. */\n    private _emitInputEvent();\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    private _updateTickIntervalPercent();\n    /** Creates a slider change object from the specified value. */\n    private _createChangeEvent(value?);\n    /** Calculates the percentage of the slider that a value is. */\n    private _calculatePercentage(value);\n    /** Calculates the value a percentage of the slider corresponds to. */\n    private _calculateValue(percentage);\n    /** Return a number between two numbers. */\n    private _clamp(value, min?, max?);\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    private _getSliderDimensions();\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    private _focusHostElement();\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to eb triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}