{"version":3,"file":"form-field.d.ts","sources":["form-field.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA","sourcesContent":["import { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, QueryList, Renderer2 } from '@angular/core';\nimport { FloatPlaceholderType, PlaceholderOptions } from '@angular/material/core';\nimport { MatError } from './error';\nimport { MatFormFieldControl } from './form-field-control';\nimport { MatHint } from './hint';\nimport { MatPlaceholder } from './placeholder';\nimport { MatPrefix } from './prefix';\nimport { MatSuffix } from './suffix';\n/** Container for form controls that applies Material Design styling and behavior. */\nexport declare class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n    _elementRef: ElementRef;\n    private _renderer;\n    private _changeDetectorRef;\n    private _placeholderOptions;\n    /** Color of the form field underline, based on the theme. */\n    color: 'primary' | 'accent' | 'warn';\n    /** @deprecated Use `color` instead. */\n    dividerColor: 'primary' | 'accent' | 'warn';\n    /** Whether the required marker should be hidden. */\n    hideRequiredMarker: any;\n    private _hideRequiredMarker;\n    /** Override for the logic that disables the placeholder animation in certain cases. */\n    private _showAlwaysAnimate;\n    /** Whether the floating label should always float or not. */\n    readonly _shouldAlwaysFloat: boolean;\n    /** Whether the placeholder can float or not. */\n    readonly _canPlaceholderFloat: boolean;\n    /** State of the mat-hint and mat-error animations. */\n    _subscriptAnimationState: string;\n    /** Text for the form field hint. */\n    hintLabel: string;\n    private _hintLabel;\n    _hintLabelId: string;\n    /** Whether the placeholder should always float, never float or float as the user types. */\n    floatPlaceholder: FloatPlaceholderType;\n    private _floatPlaceholder;\n    /** Reference to the form field's underline element. */\n    underlineRef: ElementRef;\n    _connectionContainerRef: ElementRef;\n    private _placeholder;\n    _control: MatFormFieldControl<any>;\n    _placeholderChild: MatPlaceholder;\n    _errorChildren: QueryList<MatError>;\n    _hintChildren: QueryList<MatHint>;\n    _prefixChildren: QueryList<MatPrefix>;\n    _suffixChildren: QueryList<MatSuffix>;\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef, placeholderOptions: PlaceholderOptions);\n    ngAfterContentInit(): void;\n    ngAfterContentChecked(): void;\n    ngAfterViewInit(): void;\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean;\n    /** Whether the form field has a placeholder. */\n    _hasPlaceholder(): boolean;\n    /** Determines whether to display hints or errors. */\n    _getDisplayedMessages(): 'error' | 'hint';\n    /** Animates the placeholder up and locks it in position. */\n    _animateAndLockPlaceholder(): void;\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     */\n    private _validatePlaceholders();\n    /** Does any extra processing that is required when handling the hints. */\n    private _processHints();\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     */\n    private _validateHints();\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     */\n    private _syncDescribedByIds();\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild(): void;\n}\n"]}