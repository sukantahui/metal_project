{"version":3,"file":"snack-bar-container.d.ts","sources":["snack-bar-container.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentRef, EmbeddedViewRef, NgZone, OnDestroy, Renderer2, ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { AnimationEvent } from '@angular/animations';\nimport { BasePortalHost, ComponentPortal, PortalHostDirective } from '@angular/cdk/portal';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { MatSnackBarConfig } from './snack-bar-config';\nexport declare const SHOW_ANIMATION = \"225ms cubic-bezier(0.4,0.0,1,1)\";\nexport declare const HIDE_ANIMATION = \"195ms cubic-bezier(0.0,0.0,0.2,1)\";\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nexport declare class MatSnackBarContainer extends BasePortalHost implements OnDestroy {\n    private _ngZone;\n    private _renderer;\n    private _elementRef;\n    private _changeDetectorRef;\n    /** Whether the component has been destroyed. */\n    private _destroyed;\n    /** The portal host inside of this container into which the snack bar content will be loaded. */\n    _portalHost: PortalHostDirective;\n    /** Subject for notifying that the snack bar has exited from view. */\n    _onExit: Subject<any>;\n    /** Subject for notifying that the snack bar has finished entering the view. */\n    _onEnter: Subject<any>;\n    /** The state of the snack bar animations. */\n    _animationState: string;\n    /** The snack bar configuration. */\n    snackBarConfig: MatSnackBarConfig;\n    constructor(_ngZone: NgZone, _renderer: Renderer2, _elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef);\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(): EmbeddedViewRef<any>;\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event: AnimationEvent): void;\n    /** Begin animation of snack bar entrance into view. */\n    enter(): void;\n    /** Begin animation of the snack bar exiting from view. */\n    exit(): Observable<void>;\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy(): void;\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    private _completeExit();\n}\n"]}