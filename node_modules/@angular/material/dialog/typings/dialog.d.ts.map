{"version":3,"file":"dialog.d.ts","sources":["dialog.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA","sourcesContent":["import { BlockScrollStrategy, Overlay, ScrollStrategy } from '@angular/cdk/overlay';\nimport { ComponentType } from '@angular/cdk/portal';\nimport { Location } from '@angular/common';\nimport { InjectionToken, Injector, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { MatDialogConfig } from './dialog-config';\nimport { MatDialogRef } from './dialog-ref';\nexport declare const MAT_DIALOG_DATA: InjectionToken<any>;\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => BlockScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: typeof Overlay[];\n    useFactory: (overlay: Overlay) => () => BlockScrollStrategy;\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport declare class MatDialog {\n    private _overlay;\n    private _injector;\n    private _scrollStrategy;\n    private _parentDialog;\n    private _openDialogsAtThisLevel;\n    private _afterAllClosedAtThisLevel;\n    private _afterOpenAtThisLevel;\n    private _boundKeydown;\n    /** Keeps track of the currently-open dialogs. */\n    readonly openDialogs: MatDialogRef<any>[];\n    /** Stream that emits when a dialog has been opened. */\n    readonly afterOpen: Subject<MatDialogRef<any>>;\n    readonly _afterAllClosed: any;\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed: Observable<void>;\n    constructor(_overlay: Overlay, _injector: Injector, location: Location, _scrollStrategy: any, _parentDialog: MatDialog);\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    open<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, config?: MatDialogConfig): MatDialogRef<T>;\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll(): void;\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id: string): MatDialogRef<any> | undefined;\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    private _createOverlay(config);\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    private _getOverlayConfig(dialogConfig);\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    private _attachDialogContainer(overlay, config);\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    private _attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    private _createInjector<T>(config, dialogRef, dialogContainer);\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    private _removeOpenDialog(dialogRef);\n    /**\n     * Handles global key presses while there are open dialogs. Closes the\n     * top dialog when the user presses escape.\n     */\n    private _handleKeydown(event);\n}\n"]}