{"version":3,"file":"native-date-adapter.d.ts","sources":["native-date-adapter.d.ts"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA","sourcesContent":["import { DateAdapter } from './date-adapter';\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nexport declare class NativeDateAdapter extends DateAdapter<Date> {\n    constructor(matDateLocale: string);\n    /**\n     * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n     * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n     * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n     * will produce `'8/13/1800'`.\n     */\n    useUtcForDisplay: boolean;\n    getYear(date: Date): number;\n    getMonth(date: Date): number;\n    getDate(date: Date): number;\n    getDayOfWeek(date: Date): number;\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n    getDateNames(): string[];\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n    getYearName(date: Date): string;\n    getFirstDayOfWeek(): number;\n    getNumDaysInMonth(date: Date): number;\n    clone(date: Date): Date;\n    createDate(year: number, month: number, date: number): Date;\n    today(): Date;\n    parse(value: any): Date | null;\n    format(date: Date, displayFormat: Object): string;\n    addCalendarYears(date: Date, years: number): Date;\n    addCalendarMonths(date: Date, months: number): Date;\n    addCalendarDays(date: Date, days: number): Date;\n    toIso8601(date: Date): string;\n    fromIso8601(iso8601String: string): Date | null;\n    isDateInstance(obj: any): boolean;\n    isValid(date: Date): boolean;\n    /** Creates a date but allows the month and date to overflow. */\n    private _createDateWithOverflow(year, month, date);\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    private _2digit(n);\n    /**\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n     * other browsers do not. We remove them to make output consistent and because they interfere with\n     * date parsing.\n     * @param str The string to strip direction characters from.\n     * @returns The stripped string.\n     */\n    private _stripDirectionalityCharacters(str);\n}\n"]}