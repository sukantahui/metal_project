{"version":3,"file":"checkbox.d.ts","sources":["checkbox.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CanColor, CanDisable, CanDisableRipple, HasTabIndex, MatRipple } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport declare const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any;\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport declare enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init = 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked = 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked = 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate = 3,\n}\n/** Change event object emitted by MatCheckbox. */\nexport declare class MatCheckboxChange {\n    /** The source MatCheckbox of the event. */\n    source: MatCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n/** @docs-private */\nexport declare class MatCheckboxBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatCheckboxMixinBase: (new (...args: any[]) => HasTabIndex) & (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisableRipple) & (new (...args: any[]) => CanDisable) & typeof MatCheckboxBase;\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport declare class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor, AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n    private _changeDetectorRef;\n    private _focusMonitor;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    ariaLabel: string;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    ariaLabelledby: string | null;\n    private _uniqueId;\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    id: string;\n    /** Returns the unique id for the visual hidden input. */\n    readonly inputId: string;\n    private _required;\n    /** Whether the checkbox is required. */\n    required: boolean;\n    /**\n     * Whether or not the checkbox should appear before or after the label.\n     * @deprecated\n     */\n    align: 'start' | 'end';\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    labelPosition: 'before' | 'after';\n    /** Name value will be applied to the input element if present */\n    name: string | null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n    change: EventEmitter<MatCheckboxChange>;\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    indeterminateChange: EventEmitter<boolean>;\n    /** The value attribute of the native input element */\n    value: string;\n    /** The native `<input type=\"checkbox\"> element */\n    _inputElement: ElementRef;\n    /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n    _ripple: MatRipple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    onTouched: () => any;\n    private _currentAnimationClass;\n    private _currentCheckState;\n    private _checked;\n    private _indeterminate;\n    private _controlValueAccessorChangeFn;\n    /** Reference to the focused state ripple. */\n    private _focusRipple;\n    constructor(renderer: Renderer2, elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _focusMonitor: FocusMonitor, tabIndex: string);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Whether the checkbox is checked.\n     */\n    checked: boolean;\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    indeterminate: boolean;\n    _isRippleDisabled(): boolean;\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange(): void;\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Function to be called on change.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Registers a callback to be triggered when the control has been touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be triggered when the checkbox is touched.\n     */\n    registerOnTouched(fn: any): void;\n    /**\n     * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the checkbox should be disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    private _transitionCheckState(newState);\n    private _emitChangeEvent();\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin);\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void;\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event): void;\n    /** Focuses the checkbox. */\n    focus(): void;\n    _onInteractionEvent(event: Event): void;\n    private _getAnimationClassForCheckStateTransition(oldState, newState);\n    /** Fades out the focus state ripple. */\n    private _removeFocusRipple();\n}\n"]}