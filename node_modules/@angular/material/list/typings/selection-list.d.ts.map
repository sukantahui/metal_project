{"version":3,"file":"selection-list.d.ts","sources":["selection-list.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2 } from '@angular/core';\nimport { CanDisable, CanDisableRipple, HasTabIndex, MatLine } from '@angular/material/core';\n/** @docs-private */\nexport declare class MatSelectionListBase {\n}\nexport declare const _MatSelectionListMixinBase: (new (...args: any[]) => HasTabIndex) & (new (...args: any[]) => CanDisableRipple) & (new (...args: any[]) => CanDisable) & typeof MatSelectionListBase;\n/** @docs-private */\nexport declare class MatListOptionBase {\n}\nexport declare const _MatListOptionMixinBase: (new (...args: any[]) => CanDisableRipple) & typeof MatListOptionBase;\n/** Event emitted by a selection-list whenever the state of an option is changed. */\nexport interface MatSelectionListOptionEvent {\n    option: MatListOption;\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport declare class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnInit, OnDestroy, FocusableOption, CanDisableRipple {\n    private _renderer;\n    private _element;\n    private _changeDetector;\n    selectionList: MatSelectionList;\n    private _lineSetter;\n    private _selected;\n    private _disabled;\n    /** Whether the option has focus. */\n    _hasFocus: boolean;\n    _lines: QueryList<MatLine>;\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n    checkboxPosition: 'before' | 'after';\n    /** Value of the option */\n    value: any;\n    /** Whether the option is disabled. */\n    disabled: any;\n    /** Whether the option is selected. */\n    selected: boolean;\n    /** Emitted when the option is selected. */\n    selectChange: EventEmitter<MatSelectionListOptionEvent>;\n    /** Emitted when the option is deselected. */\n    deselected: EventEmitter<MatSelectionListOptionEvent>;\n    constructor(_renderer: Renderer2, _element: ElementRef, _changeDetector: ChangeDetectorRef, selectionList: MatSelectionList);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Toggles the selection state of the option. */\n    toggle(): void;\n    /** Allows for programmatic focusing of the option. */\n    focus(): void;\n    /** Whether this list item should show a ripple effect when clicked.  */\n    _isRippleDisabled(): any;\n    _handleClick(): void;\n    _handleFocus(): void;\n    /** Retrieves the DOM element of the component host. */\n    _getHostElement(): HTMLElement;\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport declare class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption, CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit {\n    private _element;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatListOption>;\n    /** The option components contained within this selection-list. */\n    options: QueryList<MatListOption>;\n    /** The currently selected options. */\n    selectedOptions: SelectionModel<MatListOption>;\n    constructor(_element: ElementRef, tabIndex: string);\n    ngAfterContentInit(): void;\n    /** Focus the selection-list. */\n    focus(): void;\n    /** Selects all of the options. */\n    selectAll(): void;\n    /** Deselects all of the options. */\n    deselectAll(): void;\n    /** Sets the focused option of the selection-list. */\n    _setFocusedOption(option: MatListOption): void;\n    /** Removes an option from the selection list and updates the active item. */\n    _removeOptionFromList(option: MatListOption): void;\n    /** Passes relevant key presses to our key manager. */\n    _keydown(event: KeyboardEvent): void;\n    /** Toggles the selected state of the currently focused option. */\n    private _toggleSelectOnFocusedOption();\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index);\n    /** Returns the index of the specified list option. */\n    private _getOptionIndex(option);\n}\n"]}