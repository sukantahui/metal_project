{"version":3,"file":"select.d.ts","sources":["select.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiUA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { ConnectedOverlayDirective, Overlay, RepositionScrollStrategy, ScrollStrategy, ViewportRuler } from '@angular/cdk/overlay';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, NgZone, OnDestroy, OnInit, QueryList, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanDisable, HasTabIndex, MatOptgroup, MatOption, MatOptionSelectionChange, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel */\nexport declare const SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis */\nexport declare const SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport declare const SELECT_PANEL_INDENT_PADDING_X: number;\n/** The height of the select items in `em` units. */\nexport declare const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport declare const SELECT_MULTIPLE_PANEL_PADDING_X: number;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport declare const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nexport declare const MAT_SELECT_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;\n/** @docs-private */\nexport declare const MAT_SELECT_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: typeof Overlay[];\n    useFactory: (overlay: Overlay) => () => RepositionScrollStrategy;\n};\n/** Change event object that is emitted when the select value has changed. */\nexport declare class MatSelectChange {\n    source: MatSelect;\n    value: any;\n    constructor(source: MatSelect, value: any);\n}\n/** @docs-private */\nexport declare class MatSelectBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatSelectMixinBase: (new (...args: any[]) => HasTabIndex) & (new (...args: any[]) => CanDisable) & typeof MatSelectBase;\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport declare class MatSelectTrigger {\n}\nexport declare class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnDestroy, OnInit, ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any> {\n    private _viewportRuler;\n    private _changeDetectorRef;\n    private _ngZone;\n    private _defaultErrorStateMatcher;\n    private _dir;\n    private _parentForm;\n    private _parentFormGroup;\n    private _parentFormField;\n    ngControl: NgControl;\n    private _scrollStrategyFactory;\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen;\n    /** Subscriptions to option events. */\n    private _optionSubscription;\n    /** Subscription to changes in the option list. */\n    private _changeSubscription;\n    /** Subscription to tab events while overlay is focused. */\n    private _tabSubscription;\n    /** Whether filling out the select is required in the form.  */\n    private _required;\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop;\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder;\n    /** Whether the component is in multiple selection mode. */\n    private _multiple;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith;\n    /** Unique id for this input. */\n    private _uid;\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n    /** The aria-describedby attribute on the select for improved a11y. */\n    _ariaDescribedby: string;\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize: number;\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<MatOption>;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<MatOption>;\n    /** View -> model callback called when value changes */\n    _onChange: (value: any) => void;\n    /** View -> model callback called when select has been touched */\n    _onTouched: () => void;\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string;\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string;\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean;\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy: any;\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY: number;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions: {\n        originX: string;\n        originY: string;\n        overlayX: string;\n        overlayY: string;\n    }[];\n    /**\n     * Stream that emits whenever the state of the select changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    stateChanges: Subject<void>;\n    /** Whether the select is focused. */\n    focused: boolean;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType: string;\n    /** Trigger that opens the select. */\n    trigger: ElementRef;\n    /** Panel containing the select options. */\n    panel: ElementRef;\n    /** Overlay pane containing the options. */\n    overlayDir: ConnectedOverlayDirective;\n    /** All of the defined select options. */\n    options: QueryList<MatOption>;\n    /** All of the defined groups of options. */\n    optionGroups: QueryList<MatOptgroup>;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** User-supplied override of the trigger element. */\n    customTrigger: MatSelectTrigger;\n    /** Placeholder to be shown if no value has been selected. */\n    placeholder: string;\n    /** Whether the component is required. */\n    required: any;\n    /** Whether the user should be allowed to select multiple options. */\n    multiple: boolean;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Value of the select control. */\n    value: any;\n    private _value;\n    /** Whether ripples for all options in the select are disabled. */\n    disableRipple: boolean;\n    private _disableRipple;\n    /** Aria label of the select. If not specified, the placeholder will be used as label. */\n    ariaLabel: string;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /** Unique id of the element. */\n    id: string;\n    private _id;\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<MatOptionSelectionChange>;\n    /** Event emitted when the select has been opened. */\n    onOpen: EventEmitter<void>;\n    /** Event emitted when the select has been closed. */\n    onClose: EventEmitter<void>;\n    /** Event emitted when the selected value has been changed by the user. */\n    change: EventEmitter<MatSelectChange>;\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange: EventEmitter<any>;\n    constructor(_viewportRuler: ViewportRuler, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _defaultErrorStateMatcher: ErrorStateMatcher, renderer: Renderer2, elementRef: ElementRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _parentFormField: MatFormField, ngControl: NgControl, tabIndex: string, _scrollStrategyFactory: any);\n    ngOnInit(): void;\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void;\n    /** Opens the overlay panel. */\n    open(): void;\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void;\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void;\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void;\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void;\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /** Whether or not the overlay panel is open. */\n    readonly panelOpen: boolean;\n    /** The currently selected option. */\n    readonly selected: MatOption | MatOption[];\n    /** The value displayed in the trigger. */\n    readonly triggerValue: string;\n    /** Whether the element is in RTL mode. */\n    _isRtl(): boolean;\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event: KeyboardEvent): void;\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event);\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event);\n    /**\n     * When the panel element is finished transforming in (though not fading in), it\n     * emits an event and focuses an option if the panel is open.\n     */\n    _onPanelDone(): void;\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void;\n    _onFocus(): void;\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur(): void;\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void;\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string;\n    /** Whether the select has a value. */\n    readonly empty: boolean;\n    /** Whether the select is in an error state. */\n    readonly errorState: boolean;\n    private _initializeSelection();\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value, isUserInput?);\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value, isUserInput?);\n    /**\n     * Clears the select trigger and deselects every option in the list.\n     * @param skip Option that should not be deselected.\n     */\n    private _clearSelection(skip?);\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager();\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions();\n    /** Listens to user-generated selection events on each option. */\n    private _listenToOptions();\n    /** Invoked when an option is clicked. */\n    private _onSelect(option);\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private _sortValues();\n    /** Unsubscribes from all option subscriptions. */\n    private _dropSubscriptions();\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?);\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds();\n    /**\n     * Sets the `multiple` property on each option. The promise is necessary\n     * in order to avoid Angular errors when modifying the property after init.\n     */\n    private _setOptionMultiple();\n    /** Sets the `disableRipple` property on each option. */\n    private _setOptionDisableRipple();\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption();\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView();\n    /** Focuses the select element. */\n    focus(): void;\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option);\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition();\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number;\n    /** Returns the aria-label of the select component. */\n    readonly _ariaLabel: string | null;\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant(): string | null;\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX();\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll);\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll);\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption();\n    /** Handles the user pressing the arrow keys on a closed select.  */\n    private _handleClosedArrowKey(event);\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount();\n    /** Calculates the height of the select's options. */\n    private _getItemHeight();\n    setDescribedByIds(ids: string[]): void;\n    onContainerClick(): void;\n    readonly shouldPlaceholderFloat: boolean;\n}\n"]}