{"version":3,"file":"input.d.ts","sources":["input.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { DoCheck, ElementRef, OnChanges, OnDestroy, Renderer2 } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Platform } from '@angular/cdk/platform';\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput implements MatFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n    protected _elementRef: ElementRef;\n    protected _renderer: Renderer2;\n    protected _platform: Platform;\n    ngControl: NgControl;\n    protected _parentForm: NgForm;\n    protected _parentFormGroup: FormGroupDirective;\n    private _defaultErrorStateMatcher;\n    /** Variables used as cache for getters and setters. */\n    protected _type: string;\n    protected _disabled: boolean;\n    protected _required: boolean;\n    protected _id: string;\n    protected _uid: string;\n    protected _previousNativeValue: string;\n    private _readonly;\n    /** Whether the input is focused. */\n    focused: boolean;\n    /** Whether the input is in an error state. */\n    errorState: boolean;\n    /** The aria-describedby attribute on the input for improved a11y. */\n    _ariaDescribedby: string;\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n     * needs to run change detection.\n     */\n    stateChanges: Subject<void>;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType: string;\n    /** Whether the element is disabled. */\n    disabled: any;\n    /** Unique id of the element. */\n    id: string;\n    /** Placeholder attribute of the element. */\n    placeholder: string;\n    /** Whether the element is required. */\n    required: any;\n    /** Input type of the element. */\n    type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /** The input element's value. */\n    value: string;\n    /** Whether the element is readonly. */\n    readonly: any;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _platform: Platform, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    focus(): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Re-evaluates the error state. This is only relevant with @angular/forms. */\n    protected _updateErrorState(): void;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /** Determines if the component host is a textarea. If not recognizable it returns false. */\n    protected _isTextarea(): boolean;\n    readonly empty: boolean;\n    readonly shouldPlaceholderFloat: boolean;\n    setDescribedByIds(ids: string[]): void;\n    onContainerClick(): void;\n}\n"]}