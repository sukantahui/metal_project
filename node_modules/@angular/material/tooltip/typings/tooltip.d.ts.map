{"version":3,"file":"tooltip.d.ts","sources":["tooltip.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AnimationEvent } from '@angular/animations';\nimport { AriaDescriber } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, RepositionScrollStrategy, ScrollStrategy, ConnectionPositionPair } from '@angular/cdk/overlay';\nimport { Platform } from '@angular/cdk/platform';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { ChangeDetectorRef, ElementRef, InjectionToken, NgZone, OnDestroy, Renderer2, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nexport declare type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/** Time in ms to delay before changing the tooltip visibility to hidden */\nexport declare const TOUCHEND_HIDE_DELAY = 1500;\n/** Time in ms to throttle repositioning after scroll events. */\nexport declare const SCROLL_THROTTLE_MS = 20;\n/** CSS class that will be attached to the overlay panel. */\nexport declare const TOOLTIP_PANEL_CLASS = \"mat-tooltip-panel\";\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport declare function getMatTooltipInvalidPositionError(position: string): Error;\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;\n/** @docs-private */\nexport declare const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: typeof Overlay[];\n    useFactory: (overlay: Overlay) => () => RepositionScrollStrategy;\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\nexport declare class MatTooltip implements OnDestroy {\n    private _overlay;\n    private _elementRef;\n    private _scrollDispatcher;\n    private _viewContainerRef;\n    private _ngZone;\n    private _platform;\n    private _ariaDescriber;\n    private _scrollStrategy;\n    private _dir;\n    _overlayRef: OverlayRef | null;\n    _tooltipInstance: TooltipComponent | null;\n    private _position;\n    private _disabled;\n    private _tooltipClass;\n    /** Allows the user to define the position of the tooltip relative to the parent element */\n    position: TooltipPosition;\n    /** Disables the display of the tooltip. */\n    disabled: boolean;\n    /** @deprecated */\n    _positionDeprecated: TooltipPosition;\n    /** The default delay in ms before showing the tooltip after show is called */\n    showDelay: number;\n    /** The default delay in ms before hiding the tooltip after hide is called */\n    hideDelay: number;\n    private _message;\n    /** The message to be displayed in the tooltip */\n    message: string;\n    /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    private _enterListener;\n    private _leaveListener;\n    constructor(renderer: Renderer2, _overlay: Overlay, _elementRef: ElementRef, _scrollDispatcher: ScrollDispatcher, _viewContainerRef: ViewContainerRef, _ngZone: NgZone, _platform: Platform, _ariaDescriber: AriaDescriber, _scrollStrategy: any, _dir: Directionality);\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    ngOnDestroy(): void;\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    show(delay?: number): void;\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    hide(delay?: number): void;\n    /** Shows/hides the tooltip */\n    toggle(): void;\n    /** Returns true if the tooltip is currently visible to the user */\n    _isTooltipVisible(): boolean;\n    /** Handles the keydown events on the host element. */\n    _handleKeydown(e: KeyboardEvent): void;\n    /** Create the tooltip to display */\n    private _createTooltip();\n    /** Create the overlay config and position strategy */\n    private _createOverlay();\n    /** Disposes the current tooltip and the overlay it is attached to */\n    private _disposeTooltip();\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n     */\n    _getOrigin(): {\n        main: OriginConnectionPosition;\n        fallback: OriginConnectionPosition;\n    };\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {\n        main: OverlayConnectionPosition;\n        fallback: OverlayConnectionPosition;\n    };\n    /** Updates the tooltip message and repositions the overlay according to the new message length */\n    private _updateTooltipMessage();\n    /** Updates the tooltip class */\n    private _setTooltipClass(tooltipClass);\n    /** Inverts an overlay position. */\n    private _invertPosition(x, y);\n}\nexport declare type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\nexport declare class TooltipComponent {\n    private _changeDetectorRef;\n    /** Message to display in the tooltip */\n    message: string;\n    /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n    tooltipClass: string | string[] | Set<string> | {\n        [key: string]: any;\n    };\n    /** The timeout ID of any current timer set to show the tooltip */\n    _showTimeoutId: number;\n    /** The timeout ID of any current timer set to hide the tooltip */\n    _hideTimeoutId: number;\n    /** Property watched by the animation framework to show or hide the tooltip */\n    _visibility: TooltipVisibility;\n    /** Whether interactions on the page should close the tooltip */\n    private _closeOnInteraction;\n    /** The transform origin used in the animation for showing and hiding the tooltip */\n    _transformOrigin: 'top' | 'bottom' | 'left' | 'right';\n    /** Current position of the tooltip. */\n    private _position;\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private _onHide;\n    constructor(_changeDetectorRef: ChangeDetectorRef);\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param position Position of the tooltip.\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    show(position: TooltipPosition, delay: number): void;\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    hide(delay: number): void;\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void>;\n    /** Whether the tooltip is being displayed. */\n    isVisible(): boolean;\n    /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n    _setTransformOrigin(overlayPosition: ConnectionPositionPair): void;\n    _animationStart(): void;\n    _animationDone(event: AnimationEvent): void;\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.google.com/components/tooltips.html#tooltips-interaction\n     */\n    _handleBodyInteraction(): void;\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    _markForCheck(): void;\n}\n"]}