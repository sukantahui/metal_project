{"version":3,"file":"datepicker.d.ts","sources":["datepicker.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, RepositionScrollStrategy, ScrollStrategy } from '@angular/cdk/overlay';\nimport { AfterContentInit, EventEmitter, InjectionToken, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\nimport { DateAdapter } from '@angular/material/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Subject } from 'rxjs/Subject';\nimport { MatCalendar } from './calendar';\nimport { MatDatepickerInput } from './datepicker-input';\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;\n/** @docs-private */\nexport declare function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay): () => RepositionScrollStrategy;\n/** @docs-private */\nexport declare const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER: {\n    provide: InjectionToken<() => ScrollStrategy>;\n    deps: typeof Overlay[];\n    useFactory: (overlay: Overlay) => () => RepositionScrollStrategy;\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nexport declare class MatDatepickerContent<D> implements AfterContentInit {\n    datepicker: MatDatepicker<D>;\n    _calendar: MatCalendar<D>;\n    ngAfterContentInit(): void;\n    /**\n     * Handles keydown event on datepicker content.\n     * @param event The event.\n     */\n    _handleKeydown(event: KeyboardEvent): void;\n}\n/** Component responsible for managing the datepicker popup/dialog. */\nexport declare class MatDatepicker<D> implements OnDestroy {\n    private _dialog;\n    private _overlay;\n    private _ngZone;\n    private _viewContainerRef;\n    private _scrollStrategy;\n    private _dateAdapter;\n    private _dir;\n    private _document;\n    /** The date to open the calendar to initially. */\n    startAt: D | null;\n    private _startAt;\n    /** The view that the calendar should start in. */\n    startView: 'month' | 'year';\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a popup and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi: boolean;\n    /** Whether the datepicker pop-up should be disabled. */\n    disabled: any;\n    private _disabled;\n    /**\n     * Emits new selected date when selected date changes.\n     * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n     */\n    selectedChanged: EventEmitter<D>;\n    /** Whether the calendar is open. */\n    opened: boolean;\n    /** The id for the datepicker calendar. */\n    id: string;\n    /** The currently selected date. */\n    _selected: D | null;\n    private _validSelected;\n    /** The minimum selectable date. */\n    readonly _minDate: D | null;\n    /** The maximum selectable date. */\n    readonly _maxDate: D | null;\n    readonly _dateFilter: (date: D | null) => boolean;\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    private _popupRef;\n    /** A reference to the dialog when the calendar is opened as a dialog. */\n    private _dialogRef;\n    /** A portal containing the calendar for this datepicker. */\n    private _calendarPortal;\n    /** The element that was focused before the datepicker was opened. */\n    private _focusedElementBeforeOpen;\n    private _inputSubscription;\n    /** The input element this datepicker is associated with. */\n    _datepickerInput: MatDatepickerInput<D>;\n    /** Emits when the datepicker is disabled. */\n    _disabledChange: Subject<boolean>;\n    constructor(_dialog: MatDialog, _overlay: Overlay, _ngZone: NgZone, _viewContainerRef: ViewContainerRef, _scrollStrategy: any, _dateAdapter: DateAdapter<D>, _dir: Directionality, _document: any);\n    ngOnDestroy(): void;\n    /** Selects the given date */\n    _select(date: D): void;\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    _registerInput(input: MatDatepickerInput<D>): void;\n    /** Open the calendar. */\n    open(): void;\n    /** Close the calendar. */\n    close(): void;\n    /** Open the calendar as a dialog. */\n    private _openAsDialog();\n    /** Open the calendar as a popup. */\n    private _openAsPopup();\n    /** Create the popup. */\n    private _createPopup();\n    /** Create the popup PositionStrategy. */\n    private _createPopupPositionStrategy();\n}\n"]}