{"version":3,"file":"year-view.d.ts","sources":["year-view.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { MatCalendarCell } from './calendar-body';\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nexport declare class MatYearView<D> implements AfterContentInit {\n    _dateAdapter: DateAdapter<D>;\n    private _dateFormats;\n    private _changeDetectorRef;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    activeDate: D;\n    private _activeDate;\n    /** The currently selected date. */\n    selected: D | null;\n    private _selected;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Emits when a new month is selected. */\n    selectedChange: EventEmitter<D>;\n    /** Grid of calendar cells representing the months of the year. */\n    _months: MatCalendarCell[][];\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel: string;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth: number | null;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth: number | null;\n    constructor(_dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _changeDetectorRef: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    /** Handles when a new month is selected. */\n    _monthSelected(month: number): void;\n    /** Initializes this month view. */\n    _init(): void;\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private _getMonthInCurrentYear(date);\n    /** Creates an MatCalendarCell for the given month. */\n    private _createCellForMonth(month, monthName);\n    /** Whether the given month is enabled. */\n    private _isMonthEnabled(month);\n}\n"]}