{"version":3,"file":"datepicker-input.d.ts","sources":["datepicker-input.d.ts"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA","sourcesContent":["import { AfterContentInit, ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { MatFormField } from '@angular/material/form-field';\nimport { MatDatepicker } from './datepicker';\nexport declare const MAT_DATEPICKER_VALUE_ACCESSOR: any;\nexport declare const MAT_DATEPICKER_VALIDATORS: any;\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport declare class MatDatepickerInputEvent<D> {\n    target: MatDatepickerInput<D>;\n    targetElement: HTMLElement;\n    /** The new value for the target datepicker input. */\n    value: D | null;\n    constructor(target: MatDatepickerInput<D>, targetElement: HTMLElement);\n}\n/** Directive used to connect an input to a MatDatepicker. */\nexport declare class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy, Validator {\n    private _elementRef;\n    private _renderer;\n    private _dateAdapter;\n    private _dateFormats;\n    private _formField;\n    /** The datepicker that this input is associated with. */\n    matDatepicker: MatDatepicker<D>;\n    _datepicker: MatDatepicker<D>;\n    private registerDatepicker(value);\n    matDatepickerFilter: (date: D | null) => boolean;\n    _dateFilter: (date: D | null) => boolean;\n    /** The value of the input. */\n    value: D | null;\n    private _value;\n    /** The minimum valid date. */\n    min: D | null;\n    private _min;\n    /** The maximum valid date. */\n    max: D | null;\n    private _max;\n    /** Whether the datepicker-input is disabled. */\n    disabled: any;\n    private _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    dateChange: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when an `input` event is fired on this `<input>`. */\n    dateInput: EventEmitter<MatDatepickerInputEvent<D>>;\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    _valueChange: EventEmitter<D | null>;\n    /** Emits when the disabled state has changed */\n    _disabledChange: EventEmitter<boolean>;\n    _onTouched: () => void;\n    private _cvaOnChange;\n    private _validatorOnChange;\n    private _datepickerSubscription;\n    private _localeSubscription;\n    /** The form control validator for whether the input parses. */\n    private _parseValidator;\n    /** The form control validator for the min date. */\n    private _minValidator;\n    /** The form control validator for the max date. */\n    private _maxValidator;\n    /** The form control validator for the date filter. */\n    private _filterValidator;\n    /** The combined form control validator for this input. */\n    private _validator;\n    /** Whether the last value set on the input was valid. */\n    private _lastValueValid;\n    constructor(_elementRef: ElementRef, _renderer: Renderer2, _dateAdapter: DateAdapter<D>, _dateFormats: MatDateFormats, _formField: MatFormField);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    registerOnValidatorChange(fn: () => void): void;\n    validate(c: AbstractControl): ValidationErrors | null;\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getPopupConnectionElementRef(): ElementRef;\n    writeValue(value: D): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(disabled: boolean): void;\n    _onKeydown(event: KeyboardEvent): void;\n    _onInput(value: string): void;\n    _onChange(): void;\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private _getValidDateOrNull(obj);\n}\n"]}