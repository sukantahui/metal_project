{"version":3,"file":"chip.d.ts","sources":["chip.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;;;;;;;;;;;;;;;;;;;;;AAmBA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption } from '@angular/cdk/a11y';\nimport { ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';\nimport { CanColor, CanDisable } from '@angular/material/core';\nimport { Subject } from 'rxjs/Subject';\nexport interface MatChipEvent {\n    chip: MatChip;\n}\n/** Event object emitted by MatChip when selected or deselected. */\nexport declare class MatChipSelectionChange {\n    source: MatChip;\n    selected: boolean;\n    isUserInput: boolean;\n    constructor(source: MatChip, selected: boolean, isUserInput?: boolean);\n}\n/** @docs-private */\nexport declare class MatChipBase {\n    _renderer: Renderer2;\n    _elementRef: ElementRef;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef);\n}\nexport declare const _MatChipMixinBase: (new (...args: any[]) => CanColor) & (new (...args: any[]) => CanDisable) & typeof MatChipBase;\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\nexport declare class MatBasicChip {\n}\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport declare class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor, CanDisable {\n    _elementRef: ElementRef;\n    protected _value: any;\n    protected _selected: boolean;\n    protected _selectable: boolean;\n    protected _removable: boolean;\n    /** Whether the chip has focus. */\n    _hasFocus: boolean;\n    /** Whether the chip is selected. */\n    selected: boolean;\n    /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n    value: any;\n    /**\n     * Whether or not the chips are selectable. When a chip is not selectable,\n     * changes to it's selected state are always ignored.\n     */\n    selectable: boolean;\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (remove) events.\n     */\n    removable: boolean;\n    /** Emits when the chip is focused. */\n    _onFocus: Subject<MatChipEvent>;\n    /** Emits when the chip is blured. */\n    _onBlur: Subject<MatChipEvent>;\n    /** Emitted when the chip is selected or deselected. */\n    selectionChange: EventEmitter<MatChipSelectionChange>;\n    /** Emitted when the chip is destroyed. */\n    destroyed: EventEmitter<MatChipEvent>;\n    /**\n     * Emitted when the chip is destroyed.\n     * @deprecated Use 'destroyed' instead.\n     */\n    destroy: EventEmitter<MatChipEvent>;\n    /** Emitted when a chip is to be removed. */\n    removed: EventEmitter<MatChipEvent>;\n    /**\n     * Emitted when a chip is to be removed.\n     * @deprecated Use `removed` instead.\n     */\n    onRemove: EventEmitter<MatChipEvent>;\n    readonly ariaSelected: string | null;\n    constructor(renderer: Renderer2, _elementRef: ElementRef);\n    ngOnDestroy(): void;\n    /** Selects the chip. */\n    select(): void;\n    /** Deselects the chip. */\n    deselect(): void;\n    /** Select this chip and emit selected event */\n    selectViaInteraction(): void;\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput?: boolean): boolean;\n    /** Allows for programmatic focusing of the chip. */\n    focus(): void;\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove(): void;\n    /** Ensures events fire properly upon click. */\n    _handleClick(event: Event): void;\n    /** Handle custom key presses. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _blur(): void;\n}\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport declare class MatChipRemove {\n    protected _parentChip: MatChip;\n    constructor(_parentChip: MatChip);\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(): void;\n}\n"]}