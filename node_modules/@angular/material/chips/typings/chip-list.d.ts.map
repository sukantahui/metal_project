{"version":3,"file":"chip-list.d.ts","sources":["chip-list.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2MA","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList, Renderer2 } from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { MatChip, MatChipEvent, MatChipSelectionChange } from './chip';\nimport { MatChipInput } from './chip-input';\n/** Change event object that is emitted when the chip list value has changed. */\nexport declare class MatChipListChange {\n    source: MatChipList;\n    value: any;\n    constructor(source: MatChipList, value: any);\n}\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport declare class MatChipList implements MatFormFieldControl<any>, ControlValueAccessor, AfterContentInit, OnInit, OnDestroy {\n    protected _renderer: Renderer2;\n    protected _elementRef: ElementRef;\n    private _changeDetectorRef;\n    private _dir;\n    private _parentForm;\n    private _parentFormGroup;\n    ngControl: NgControl;\n    readonly controlType: string;\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n     * needs to run change detection.\n     */\n    stateChanges: Subject<void>;\n    /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n    protected _lastDestroyedIndex: number | null;\n    /** Track which chips we're listening to for focus/destruction. */\n    protected _chipSet: WeakMap<MatChip, boolean>;\n    /** Subscription to tabbing out from the chip list. */\n    private _tabOutSubscription;\n    /** Subscription to changes in the chip list. */\n    private _changeSubscription;\n    /** Subscription to focus changes in the chips. */\n    private _chipFocusSubscription;\n    /** Subscription to blur changes in the chips. */\n    private _chipBlurSubscription;\n    /** Subscription to selection changes in chips. */\n    private _chipSelectionSubscription;\n    /** Subscription to remove changes in chips. */\n    private _chipRemoveSubscription;\n    /** Whether or not the chip is selectable. */\n    protected _selectable: boolean;\n    /** Whether the component is in multiple selection mode. */\n    private _multiple;\n    /** The chip input to add more chips */\n    protected _chipInput: MatChipInput;\n    /** The aria-describedby attribute on the chip list for improved a11y. */\n    protected _ariaDescribedby: string;\n    /** Id of the chip list */\n    protected _id: string;\n    /** Uid of the chip list */\n    protected _uid: string;\n    /** Whether this is required */\n    protected _required: boolean;\n    /** Whether this is disabled */\n    protected _disabled: boolean;\n    protected _value: any;\n    /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n    protected _placeholder: string;\n    /** Tab index for the chip list. */\n    _tabIndex: number;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    _userTabIndex: number | null;\n    /** The FocusKeyManager which handles focus. */\n    _keyManager: FocusKeyManager<MatChip>;\n    /** Function when touched */\n    _onTouched: () => void;\n    /** Function when changed */\n    _onChange: (value: any) => void;\n    _selectionModel: SelectionModel<MatChip>;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith;\n    /** The array of selected chips inside chip list. */\n    readonly selected: MatChip[] | MatChip;\n    /** Whether the user should be allowed to select multiple chips. */\n    multiple: boolean;\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    compareWith: (o1: any, o2: any) => boolean;\n    /** Required for FormFieldControl */\n    value: any;\n    /** Required for FormFieldControl. The ID of the chip list */\n    id: string;\n    /** Required for FormFieldControl. Whether the chip list is required. */\n    required: any;\n    /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n    placeholder: string;\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    readonly focused: boolean;\n    /** Whether this chip-list contains no chips and no matChipInput. */\n    readonly empty: boolean;\n    readonly shouldPlaceholderFloat: boolean;\n    /** Whether this chip-list is disabled. */\n    disabled: any;\n    /** Whether the chip list is in an error state. */\n    readonly errorState: boolean;\n    /** Orientation of the chip list. */\n    ariaOrientation: 'horizontal' | 'vertical';\n    /**\n     * Whether or not this chip is selectable. When a chip is not selectable,\n     * its selected state is always ignored.\n     */\n    selectable: boolean;\n    tabIndex: number;\n    /** Combined stream of all of the child chips' selection change events. */\n    readonly chipSelectionChanges: Observable<MatChipSelectionChange>;\n    /** Combined stream of all of the child chips' focus change events. */\n    readonly chipFocusChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' blur change events. */\n    readonly chipBlurChanges: Observable<MatChipEvent>;\n    /** Combined stream of all of the child chips' remove change events. */\n    readonly chipRemoveChanges: Observable<MatChipEvent>;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    change: EventEmitter<MatChipListChange>;\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange: EventEmitter<any>;\n    /** The chip components contained within this chip list. */\n    chips: QueryList<MatChip>;\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _changeDetectorRef: ChangeDetectorRef, _dir: Directionality, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl);\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement: MatChipInput): void;\n    setDescribedByIds(ids: string[]): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(disabled: boolean): void;\n    onContainerClick(): void;\n    /**\n     * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(): void;\n    /** Attempt to focus an input if we have one. */\n    _focusInput(): void;\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event: KeyboardEvent): void;\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected _updateTabIndex(): void;\n    /**\n     * Update key manager's active item when chip is deleted.\n     * If the deleted chip is the last chip in chip list, focus the new last chip.\n     * Otherwise focus the next chip in the list.\n     * Save `_lastDestroyedIndex` so we can set the correct focus.\n     */\n    protected _updateKeyManager(chip: MatChip): void;\n    /**\n     * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n     * one.\n     */\n    protected _updateFocusForDestroyedChips(): void;\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    private _isValidIndex(index);\n    private _isInputEmpty(element);\n    _setSelectionByValue(value: any, isUserInput?: boolean): void;\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    private _selectValue(value, isUserInput?);\n    private _initializeSelection();\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    private _clearSelection(skip?);\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private _sortValues();\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?);\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur(): void;\n    /** Mark the field as touched */\n    _markAsTouched(): void;\n    private _resetChips();\n    private _dropSubscriptions();\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsSelection();\n    /** Listens to user-generated selection events on each chip. */\n    private _listenToChipsFocus();\n    private _listenToChipsRemoved();\n}\n"]}