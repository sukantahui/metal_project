{"version":3,"file":"chip-input.d.ts","sources":["chip-input.d.ts"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA","sourcesContent":["import { ElementRef, EventEmitter } from '@angular/core';\nimport { MatChipList } from './chip-list';\nexport interface MatChipInputEvent {\n    input: HTMLInputElement;\n    value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\nexport declare class MatChipInput {\n    protected _elementRef: ElementRef;\n    focused: boolean;\n    _chipList: MatChipList;\n    /** Register input for chip list */\n    chipList: MatChipList;\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    addOnBlur: boolean;\n    _addOnBlur: boolean;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes: number[];\n    /** Emitted when a chip is to be added. */\n    chipEnd: EventEmitter<MatChipInputEvent>;\n    placeholder: string;\n    readonly empty: boolean;\n    /** The native input element to which this directive is attached. */\n    protected _inputElement: HTMLInputElement;\n    constructor(_elementRef: ElementRef);\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event?: KeyboardEvent): void;\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur(): void;\n    _focus(): void;\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event?: KeyboardEvent): void;\n    focus(): void;\n}\n"]}