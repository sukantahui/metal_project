import { Component, ElementRef, Input, NgModule, Renderer2, ViewChild, forwardRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatButtonModule, MatFormFieldModule, MatIconModule, MatInputModule } from '@angular/material';

class InlineInputEditComponent {
    /**
     * @param {?} element
     * @param {?} _renderer
     */
    constructor(element, _renderer) {
        this._renderer = _renderer;
        /**
         * The control label *
         */
        this.label = '';
        /**
         * Type of input control *
         */
        this.type = 'text';
        /**
         * Input value required *
         */
        this.required = false;
        /**
         * Input control is disabled *
         */
        this.disabled = false;
        // color of the confirm button
        this.confirmColor = 'primary';
        // color of the cancel button
        this.cancelColor = 'warn';
        /**
         * private value of input *
         */
        this._value = '';
        /**
         * value prior to editing *
         */
        this.preValue = '';
        /**
         * We are editing *
         */
        this.editing = false;
        /**
         * Callback when the value is changing *
         */
        this.onChange = Function.prototype;
        /**
         * Callback when the input is accessed *
         */
        this.onTouched = Function.prototype;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this._value) {
            this._value = v;
            this.onChange(v);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== undefined) {
            this._value = value;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    cancel($event) {
        this.value = this.preValue;
        this.editing = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    confirm($event) {
        this.editing = false;
        this.changed($event, this);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    keypress($event) {
        if ($event.keyCode === 13) {
            this.confirm($event);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    edit(value) {
        if (this.disabled) {
            return;
        }
        this.preValue = value;
        this.editing = true;
        // Set focus on the input element, but we need to give it one cycle so it is ready
        setTimeout(_ => this.inlineEditControl.nativeElement.focus());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
InlineInputEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'inline-input-edit',
                template: `
    <div>
    	<mat-form-field>
    		<span matPrefix [innerHTML]="prefix"></span>
    		<input #inlineEditControl matInput [readonly]="!editing" [required]="required" (keypress)="keypress($event)" [name]="value" [(ngModel)]="value" [type]="type" [placeholder]="label" />
    		<span matSuffix  *ngIf="editing">
    			<button mat-icon-button [color]="confirmColor" (click)="confirm($event)"><mat-icon>done</mat-icon></button>
    			<button mat-icon-button [color]="cancelColor" (click)="cancel($event)"><mat-icon>clear</mat-icon></button>
    		</span>
    		<span matSuffix  *ngIf="!editing">
    			<button mat-icon-button [color]="'primary'" (click)="edit(value)"><mat-icon>mode_edit</mat-icon></button>
    		</span>
    	</mat-form-field>
    </div>
  `,
                styles: [`
    :host mat-form-field {
    	width:100%;
    }
  `],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => InlineInputEditComponent),
                        multi: true
                    }
                ]
            },] },
];
/**
 * @nocollapse
 */
InlineInputEditComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
InlineInputEditComponent.propDecorators = {
    'inlineEditControl': [{ type: ViewChild, args: ['inlineEditControl',] },],
    'label': [{ type: Input },],
    'type': [{ type: Input },],
    'required': [{ type: Input },],
    'disabled': [{ type: Input },],
    'prefix': [{ type: Input },],
    'confirmColor': [{ type: Input },],
    'cancelColor': [{ type: Input },],
    'changed': [{ type: Input },],
};

class InlineEditModule {
}
InlineEditModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    MatButtonModule, MatIconModule, MatInputModule, MatFormFieldModule
                ],
                declarations: [InlineInputEditComponent],
                exports: [InlineInputEditComponent]
            },] },
];
/**
 * @nocollapse
 */
InlineEditModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { InlineEditModule, InlineInputEditComponent };
//# sourceMappingURL=ngx-inline-edit.js.map
