{"version":3,"file":"ngx-inline-edit.umd.min.js","sources":["~/@savantly/ngx-inline-edit/src/app/modules/inline-edit/inline-input-edit/inline-input-edit.component.ts","~/@savantly/ngx-inline-edit/src/app/modules/inline-edit/inline-edit.module.ts"],"sourcesContent":["import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  Renderer,\n  forwardRef,\n  OnInit, Renderer2 } from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nexport class InlineInputEditComponent implements ControlValueAccessor, OnInit {\n/**\n * input control *\n */\ninlineEditControl: ElementRef;\n/**\n * The control label *\n */\nlabel = '';\n/**\n * Type of input control *\n */\ntype = 'text';\n/**\n * Input value required *\n */\nrequired = false;\n/**\n * Input control is disabled *\n */\ndisabled = false;\n  // Prefix the value\n   prefix: any;\n  // color of the confirm button\n   confirmColor = 'primary';\n  // color of the cancel button\n   cancelColor = 'warn';\n\n   changed: Function;\n/**\n * private value of input *\n */\nprivate _value = '';\n/**\n * value prior to editing *\n */\nprivate preValue = '';\n/**\n * We are editing *\n */\npublic editing = false;\n/**\n * Callback when the value is changing *\n */\npublic onChange: any = Function.prototype;\n/**\n * Callback when the input is accessed *\n */\npublic onTouched: any = Function.prototype;\n/**\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: any) {\n    if (v !== this._value) {\n      this._value = v;\n      this.onChange(v);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    if (value !== undefined) {\n      this._value = value;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: (_: any) => {}): void {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: () => {}): void {\n    this.onTouched = fn;\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\ncancel($event: Event) {\n    this.value = this.preValue;\n    this.editing = false;\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nconfirm($event: Event) {\n    this.editing = false;\n    this.changed($event, this);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nkeypress($event) {\n    if ($event.keyCode === 13) {\n      this.confirm($event);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nedit(value) {\n    if (this.disabled) {\n      return;\n    }\n\n    this.preValue = value;\n    this.editing = true;\n    // Set focus on the input element, but we need to give it one cycle so it is ready\n    setTimeout(_ => this.inlineEditControl.nativeElement.focus());\n  }\n/**\n * @param {?} element\n * @param {?} _renderer\n */\nconstructor(element: ElementRef,\nprivate _renderer: Renderer2) { }\n/**\n * @return {?}\n */\nngOnInit() {\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'inline-input-edit',\n  template: `\n    <div>\n    \t<mat-form-field>\n    \t\t<span matPrefix [innerHTML]=\"prefix\"></span>\n    \t\t<input #inlineEditControl matInput [readonly]=\"!editing\" [required]=\"required\" (keypress)=\"keypress($event)\" [name]=\"value\" [(ngModel)]=\"value\" [type]=\"type\" [placeholder]=\"label\" />\n    \t\t<span matSuffix  *ngIf=\"editing\">\n    \t\t\t<button mat-icon-button [color]=\"confirmColor\" (click)=\"confirm($event)\"><mat-icon>done</mat-icon></button>\n    \t\t\t<button mat-icon-button [color]=\"cancelColor\" (click)=\"cancel($event)\"><mat-icon>clear</mat-icon></button>\n    \t\t</span>\n    \t\t<span matSuffix  *ngIf=\"!editing\">\n    \t\t\t<button mat-icon-button [color]=\"'primary'\" (click)=\"edit(value)\"><mat-icon>mode_edit</mat-icon></button>\n    \t\t</span>\n    \t</mat-form-field>\n    </div>\n  `,\n  styles: [`\n    :host mat-form-field {\n    \twidth:100%;\n    }\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InlineInputEditComponent),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'inlineEditControl': [{ type: ViewChild, args: ['inlineEditControl', ] },],\n'label': [{ type: Input },],\n'type': [{ type: Input },],\n'required': [{ type: Input },],\n'disabled': [{ type: Input },],\n'prefix': [{ type: Input },],\n'confirmColor': [{ type: Input },],\n'cancelColor': [{ type: Input },],\n'changed': [{ type: Input },],\n};\n}\n\nfunction InlineInputEditComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nInlineInputEditComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInlineInputEditComponent.ctorParameters;\n/** @type {?} */\nInlineInputEditComponent.propDecorators;\n/**\n * input control *\n * @type {?}\n */\nInlineInputEditComponent.prototype.inlineEditControl;\n/**\n * The control label *\n * @type {?}\n */\nInlineInputEditComponent.prototype.label;\n/**\n * Type of input control *\n * @type {?}\n */\nInlineInputEditComponent.prototype.type;\n/**\n * Input value required *\n * @type {?}\n */\nInlineInputEditComponent.prototype.required;\n/**\n * Input control is disabled *\n * @type {?}\n */\nInlineInputEditComponent.prototype.disabled;\n/** @type {?} */\nInlineInputEditComponent.prototype.prefix;\n/** @type {?} */\nInlineInputEditComponent.prototype.confirmColor;\n/** @type {?} */\nInlineInputEditComponent.prototype.cancelColor;\n/** @type {?} */\nInlineInputEditComponent.prototype.changed;\n/**\n * private value of input *\n * @type {?}\n */\nInlineInputEditComponent.prototype._value;\n/**\n * value prior to editing *\n * @type {?}\n */\nInlineInputEditComponent.prototype.preValue;\n/**\n * We are editing *\n * @type {?}\n */\nInlineInputEditComponent.prototype.editing;\n/**\n * Callback when the value is changing *\n * @type {?}\n */\nInlineInputEditComponent.prototype.onChange;\n/**\n * Callback when the input is accessed *\n * @type {?}\n */\nInlineInputEditComponent.prototype.onTouched;\n/** @type {?} */\nInlineInputEditComponent.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { InlineInputEditComponent } from './inline-input-edit/inline-input-edit.component';\nimport { FormsModule } from '@angular/forms';\nimport { MatButtonModule, MatIconModule, MatInputModule, MatFormFieldModule } from '@angular/material';\nexport class InlineEditModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatButtonModule, MatIconModule, MatInputModule, MatFormFieldModule\n  ],\n  declarations: [InlineInputEditComponent],\n  exports: [InlineInputEditComponent]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction InlineEditModule_tsickle_Closure_declarations() {\n/** @type {?} */\nInlineEditModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nInlineEditModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["InlineInputEditComponent","element","_renderer","this","label","type","required","disabled","confirmColor","cancelColor","_value","preValue","editing","onChange","Function","prototype","onTouched","Object","defineProperty","get","set","v","writeValue","value","undefined","registerOnChange","fn","registerOnTouched","cancel","$event","confirm","changed","keypress","keyCode","edit","_this","setTimeout","_","inlineEditControl","nativeElement","focus","ngOnInit","decorators","Component","args","selector","template","styles","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ctorParameters","ElementRef","Renderer2","propDecorators","ViewChild","Input","prefix","InlineEditModule","NgModule","imports","CommonModule","FormsModule","MatButtonModule","MatIconModule","MatInputModule","MatFormFieldModule","declarations","exports"],"mappings":"2aASA,IAAAA,EAAA,WAmIA,SAAAA,EAvCGC,EAAwCC,GAAAC,KAA3CD,UAA2CA,EApF3CC,KAAAC,MAAI,GAIJD,KAAAE,KAFI,OAMJF,KAAAG,UAJI,EAQJH,KAAAI,UANI,EAUDJ,KAAHK,aANkB,UAQfL,KAAHM,YANiB,OAKdN,KAAHO,OAAG,GAEAP,KAAHQ,SAAG,GAEAR,KAAHS,SAAG,EAEAT,KAAHU,SAAGC,SAAAC,UAEAZ,KAAHa,UAAGF,SAAAC,iBAmBHE,OAAAC,eAjBGlB,EAiBHe,UAAA,SAAAI,IAAA,WACI,OAjBOhB,KAAKO,QAuBhBU,IAAA,SApBGC,GAqBKA,IApBMlB,KAAKO,SAqBbP,KApBKO,OAASW,EAqBdlB,KApBKU,SAASQ,qCA2BpBrB,EAAAe,UAAAO,WAAA,SAtBGC,GAuBKA,IAtBUC,YAuBZrB,KAtBKO,OAASa,IAKjBvB,EAAHe,UAAAU,iBAAG,SAAAC,GAyBCvB,KAxBKU,SAAWa,GAIjB1B,EAAHe,UAAAY,kBAAG,SAAAD,GA2BCvB,KA1BKa,UAAYU,GAgCrB1B,EAAAe,UAAAa,OAAA,SA7BGC,GA8BC1B,KA7BKoB,MAAQpB,KAAKQ,SA8BlBR,KA7BKS,SAAU,GAmCnBZ,EAAAe,UAAAe,QAAA,SAhCGD,GAiCC1B,KAhCKS,SAAU,EAiCfT,KAhCK4B,QAAQF,EAAQ1B,OAsCzBH,EAAAe,UAAAiB,SAAA,SAnCGH,GACwB,KAmCnBA,EAnCOI,SAoCT9B,KAnCK2B,QAAQD,IA0CnB7B,EAAAe,UAAAmB,KAAA,SArCGX,GAqCH,IAAAY,EAAAhC,KACQA,KArCKI,WAyCTJ,KArCKQ,SAAWY,EAsChBpB,KArCKS,SAAU,EAuCfwB,WArCW,SAAAC,GAAK,OAAAF,EAAKG,kBAAkBC,cAAcC,YAgDzDxC,EAAAe,UAAA0B,SAAA,eAxIA,GAiGOzC,EAAP0C,aACErC,KAAMsC,EAAAA,UAAWC,OA2CjBC,SA1CU,oBA2CVC,SA1CU,kyBAyDVC,QA1CQ,8DA+CRC,YAEIC,QA1CSC,EAAAA,kBA2CTC,YA1CaC,EAAAA,WAAW,WAAM,OAAApD,IA2C9BqD,OA1CO,QAMZrD,EAADsD,eAAC,WAAA,QA6CAjD,KAAMkD,EAAAA,aACNlD,KAAMmD,EAAAA,aA1CAxD,EAAPyD,gBA6CAnB,oBA5CwBjC,KAAMqD,EAAAA,UAAWd,MAAM,uBA6C/CxC,QA5CYC,KAAMsD,EAAAA,QA6ClBtD,OA5CWA,KAAMsD,EAAAA,QA6CjBrD,WA5CeD,KAAMsD,EAAAA,QA6CrBpD,WA5CeF,KAAMsD,EAAAA,QA6CrBC,SA5CavD,KAAMsD,EAAAA,QA6CnBnD,eA5CmBH,KAAMsD,EAAAA,QA6CzBlD,cA5CkBJ,KAAMsD,EAAAA,QA6CxB5B,UA5Cc1B,KAAMsD,EAAAA,SCnJpB,IAAAE,EAAA,kBAAA,aAAA,GAEuCA,EAAvCnB,aACErC,KAAMyD,EAAAA,SAAUlB,OADhBmB,SACEC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,gBAEiBC,EAAAA,cAAeC,EAAAA,eAAgBC,EAAAA,oBAAlDC,cAEctE,GADduE,SAESvE,OAIV6D,EAADP,eAAC,WAAA"}
