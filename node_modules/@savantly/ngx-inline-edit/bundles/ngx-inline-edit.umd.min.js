!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@angular/material")):"function"==typeof define&&define.amd?define(["exports","@angular/core","@angular/common","@angular/forms","@angular/material"],e):e(t["ngx-inline-edit"]={},t.ng.core,t.ng.common,t.ng.forms,t.material)}(this,function(t,e,n,o,i){"use strict";var r=function(){function t(t,e){this._renderer=e,this.label="",this.type="text",this.required=!1,this.disabled=!1,this.confirmColor="primary",this.cancelColor="warn",this._value="",this.preValue="",this.editing=!1,this.onChange=Function.prototype,this.onTouched=Function.prototype}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){t!==this._value&&(this._value=t,this.onChange(t))},enumerable:!0,configurable:!0}),t.prototype.writeValue=function(t){t!==undefined&&(this._value=t)},t.prototype.registerOnChange=function(t){this.onChange=t},t.prototype.registerOnTouched=function(t){this.onTouched=t},t.prototype.cancel=function(t){this.value=this.preValue,this.editing=!1},t.prototype.confirm=function(t){this.editing=!1,this.changed(t,this)},t.prototype.keypress=function(t){13===t.keyCode&&this.confirm(t)},t.prototype.edit=function(t){var e=this;this.disabled||(this.preValue=t,this.editing=!0,setTimeout(function(t){return e.inlineEditControl.nativeElement.focus()}))},t.prototype.ngOnInit=function(){},t}();r.decorators=[{type:e.Component,args:[{selector:"inline-input-edit",template:'\n    <div>\n    \t<mat-form-field>\n    \t\t<span matPrefix [innerHTML]="prefix"></span>\n    \t\t<input #inlineEditControl matInput [readonly]="!editing" [required]="required" (keypress)="keypress($event)" [name]="value" [(ngModel)]="value" [type]="type" [placeholder]="label" />\n    \t\t<span matSuffix  *ngIf="editing">\n    \t\t\t<button mat-icon-button [color]="confirmColor" (click)="confirm($event)"><mat-icon>done</mat-icon></button>\n    \t\t\t<button mat-icon-button [color]="cancelColor" (click)="cancel($event)"><mat-icon>clear</mat-icon></button>\n    \t\t</span>\n    \t\t<span matSuffix  *ngIf="!editing">\n    \t\t\t<button mat-icon-button [color]="\'primary\'" (click)="edit(value)"><mat-icon>mode_edit</mat-icon></button>\n    \t\t</span>\n    \t</mat-form-field>\n    </div>\n  ',styles:["\n    :host mat-form-field {\n    \twidth:100%;\n    }\n  "],providers:[{provide:o.NG_VALUE_ACCESSOR,useExisting:e.forwardRef(function(){return r}),multi:!0}]}]}],r.ctorParameters=function(){return[{type:e.ElementRef},{type:e.Renderer2}]},r.propDecorators={inlineEditControl:[{type:e.ViewChild,args:["inlineEditControl"]}],label:[{type:e.Input}],type:[{type:e.Input}],required:[{type:e.Input}],disabled:[{type:e.Input}],prefix:[{type:e.Input}],confirmColor:[{type:e.Input}],cancelColor:[{type:e.Input}],changed:[{type:e.Input}]};var a=function(){return function(){}}();a.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,o.FormsModule,i.MatButtonModule,i.MatIconModule,i.MatInputModule,i.MatFormFieldModule],declarations:[r],exports:[r]}]}],a.ctorParameters=function(){return[]},t.InlineEditModule=a,t.InlineInputEditComponent=r,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-inline-edit.umd.min.js.map
