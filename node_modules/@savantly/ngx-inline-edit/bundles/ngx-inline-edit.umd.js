(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/material')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/material'], factory) :
	(factory((global['ngx-inline-edit'] = {}),global.ng.core,global.ng.common,global.ng.forms,global.material));
}(this, (function (exports,core,common,forms,material) { 'use strict';

var InlineInputEditComponent = (function () {
    /**
     * @param {?} element
     * @param {?} _renderer
     */
    function InlineInputEditComponent(element, _renderer) {
        this._renderer = _renderer;
        /**
         * The control label *
         */
        this.label = '';
        /**
         * Type of input control *
         */
        this.type = 'text';
        /**
         * Input value required *
         */
        this.required = false;
        /**
         * Input control is disabled *
         */
        this.disabled = false;
        // color of the confirm button
        this.confirmColor = 'primary';
        // color of the cancel button
        this.cancelColor = 'warn';
        /**
         * private value of input *
         */
        this._value = '';
        /**
         * value prior to editing *
         */
        this.preValue = '';
        /**
         * We are editing *
         */
        this.editing = false;
        /**
         * Callback when the value is changing *
         */
        this.onChange = Function.prototype;
        /**
         * Callback when the input is accessed *
         */
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(InlineInputEditComponent.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () {
            return this._value;
        },
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    InlineInputEditComponent.prototype.writeValue = function (value) {
        if (value !== undefined) {
            this._value = value;
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InlineInputEditComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InlineInputEditComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InlineInputEditComponent.prototype.cancel = function ($event) {
        this.value = this.preValue;
        this.editing = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InlineInputEditComponent.prototype.confirm = function ($event) {
        this.editing = false;
        this.changed($event, this);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    InlineInputEditComponent.prototype.keypress = function ($event) {
        if ($event.keyCode === 13) {
            this.confirm($event);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InlineInputEditComponent.prototype.edit = function (value) {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.preValue = value;
        this.editing = true;
        // Set focus on the input element, but we need to give it one cycle so it is ready
        setTimeout(function (_) { return _this.inlineEditControl.nativeElement.focus(); });
    };
    /**
     * @return {?}
     */
    InlineInputEditComponent.prototype.ngOnInit = function () {
    };
    return InlineInputEditComponent;
}());
InlineInputEditComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'inline-input-edit',
                template: "\n    <div>\n    \t<mat-form-field>\n    \t\t<span matPrefix [innerHTML]=\"prefix\"></span>\n    \t\t<input #inlineEditControl matInput [readonly]=\"!editing\" [required]=\"required\" (keypress)=\"keypress($event)\" [name]=\"value\" [(ngModel)]=\"value\" [type]=\"type\" [placeholder]=\"label\" />\n    \t\t<span matSuffix  *ngIf=\"editing\">\n    \t\t\t<button mat-icon-button [color]=\"confirmColor\" (click)=\"confirm($event)\"><mat-icon>done</mat-icon></button>\n    \t\t\t<button mat-icon-button [color]=\"cancelColor\" (click)=\"cancel($event)\"><mat-icon>clear</mat-icon></button>\n    \t\t</span>\n    \t\t<span matSuffix  *ngIf=\"!editing\">\n    \t\t\t<button mat-icon-button [color]=\"'primary'\" (click)=\"edit(value)\"><mat-icon>mode_edit</mat-icon></button>\n    \t\t</span>\n    \t</mat-form-field>\n    </div>\n  ",
                styles: ["\n    :host mat-form-field {\n    \twidth:100%;\n    }\n  "],
                providers: [
                    {
                        provide: forms.NG_VALUE_ACCESSOR,
                        useExisting: core.forwardRef(function () { return InlineInputEditComponent; }),
                        multi: true
                    }
                ]
            },] },
];
/**
 * @nocollapse
 */
InlineInputEditComponent.ctorParameters = function () { return [
    { type: core.ElementRef, },
    { type: core.Renderer2, },
]; };
InlineInputEditComponent.propDecorators = {
    'inlineEditControl': [{ type: core.ViewChild, args: ['inlineEditControl',] },],
    'label': [{ type: core.Input },],
    'type': [{ type: core.Input },],
    'required': [{ type: core.Input },],
    'disabled': [{ type: core.Input },],
    'prefix': [{ type: core.Input },],
    'confirmColor': [{ type: core.Input },],
    'cancelColor': [{ type: core.Input },],
    'changed': [{ type: core.Input },],
};
var InlineEditModule = (function () {
    function InlineEditModule() {
    }
    return InlineEditModule;
}());
InlineEditModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    material.MatButtonModule, material.MatIconModule, material.MatInputModule, material.MatFormFieldModule
                ],
                declarations: [InlineInputEditComponent],
                exports: [InlineInputEditComponent]
            },] },
];
/**
 * @nocollapse
 */
InlineEditModule.ctorParameters = function () { return []; };

exports.InlineEditModule = InlineEditModule;
exports.InlineInputEditComponent = InlineInputEditComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-inline-edit.umd.js.map
